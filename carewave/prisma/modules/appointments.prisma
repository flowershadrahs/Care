enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
  PENDING_CONFIRMATION
}

enum AppointmentType {
  REGULAR
  WALK_IN
  EMERGENCY
  TELECONSULTATION
  FOLLOW_UP
  PRE_ADMISSION
  POST_DISCHARGE
  SPECIALIST_CONSULT
}

enum TriagePriority {
  EMERGENCY
  URGENT
  NON_URGENT
  CRITICAL
}


model Appointment {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  patientId             Int
  patient               Patient             @relation("PatientAppointments", fields: [patientId], references: [id])
  doctorId              Int?                @unique
  doctor                Doctor?             @relation("DoctorAppointments", fields: [doctorId], references: [id])
  departmentId          Int?
  department            Department?         @relation("DepartmentAppointments", fields: [departmentId], references: [id])
  bookedById            Int?                @unique
  bookedBy              User?               @relation("AppointmentBookedBy", fields: [bookedById], references: [id])
  date                  DateTime
  endDate               DateTime?
  status                AppointmentStatus   @default(SCHEDULED)
  type                  AppointmentType     @default(REGULAR)
  reason                String
  notes                 String?
  checkInTime           DateTime?
  checkOutTime          DateTime?
  reminderSent          Boolean             @default(false)
  reminderDate          DateTime?
  medicalRecordId       Int?                @unique
  medicalRecord         MedicalRecord?      @relation("AppointmentMedicalRecord", fields: [medicalRecordId], references: [id])
  billingId             Int?                @unique
  billing               Billing?            @relation("AppointmentBilling", fields: [billingId], references: [id])
  queueId               Int?                @unique
  queue                 Queue?              @relation("AppointmentQueue", fields: [queueId], references: [id])
  admissionId           Int?                @unique
  admission             Admission?          @relation("AppointmentAdmission", fields: [admissionId], references: [id])
  dischargeId           Int?                @unique
  discharge             Discharge?          @relation("AppointmentDischarge", fields: [dischargeId], references: [id])
  laboratoryId          Int?                @unique
  laboratory            Laboratory?         @relation("AppointmentLaboratory", fields: [laboratoryId], references: [id])
  radiologyId           Int?                @unique
  radiology             Radiology?          @relation("AppointmentRadiology", fields: [radiologyId], references: [id])
  pharmacyId            Int?                @unique
  pharmacy              Pharmacy?           @relation("AppointmentPharmacy", fields: [pharmacyId], references: [id])
  operationTheatreId    Int?                @unique
  operationTheatre      OperationTheatre?   @relation("AppointmentOperationTheatre", fields: [operationTheatreId], references: [id])
  createdById           Int?                @unique
  createdBy             User?               @relation("AppointmentCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                @unique
  updatedBy             User?               @relation("AppointmentUpdatedBy", fields: [updatedById], references: [id])
  insuranceId           Int?                @unique
  insurance             Insurance?          @relation("AppointmentInsurance", fields: [insuranceId], references: [id])
  referralId            Int?                @unique
  referral              Referral?           @relation("AppointmentReferral", fields: [referralId], references: [id])
  location              String?
  teleconsultationLink  String?
  duration              Int?
  cancellationReason    String?
  cancellationDate      DateTime?
  rescheduleCount       Int                 @default(0)
  priority              TriagePriority?
  notifications         AppointmentNotification[] @relation("AppointmentNotifications")
  auditLogs             AuditLog[]          @relation("AppointmentAuditLogs")
  appointmentDocuments  AppointmentDocument[] @relation("AppointmentDocuments")
  recurringAppointmentId Int?               @unique
  recurringAppointment   RecurringAppointment? @relation("RecurringAppointmentAppointments", fields: [recurringAppointmentId], references: [id])
  dashboardWidget        DashboardWidget?     @relation("DashboardWidgetAppointments")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model AppointmentNotification {
  id                  Int                 @id @default(autoincrement())
  uuid                String              @unique @default(uuid())
  appointmentId       Int
  appointment         Appointment         @relation("AppointmentNotifications", fields: [appointmentId], references: [id])
  notificationType    String
  status              NotificationStatus  @default(PENDING)
  sentAt              DateTime?
  recipientId         Int?                @unique
  recipient           User?               @relation("NotificationRecipient", fields: [recipientId], references: [id])
  message             String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

model AppointmentDocument {
  id                  Int                 @id @default(autoincrement())
  uuid                String              @unique @default(uuid())
  appointmentId       Int
  appointment         Appointment         @relation("AppointmentDocuments", fields: [appointmentId], references: [id])
  documentType        String
  filePath            String
  uploadedById        Int?                @unique
  uploadedBy          User?               @relation("DocumentUploadedBy", fields: [uploadedById], references: [id])
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  auditLogs           AuditLog[]          @relation("AppointmentDocumentAuditLogs")
}

model RecurringAppointment {
  id                  Int                 @id @default(autoincrement())
  uuid                String              @unique @default(uuid())
  patientId           Int
  patient             Patient             @relation("PatientRecurringAppointments", fields: [patientId], references: [id])
  doctorId            Int?                @unique
  doctor              Doctor?             @relation("DoctorRecurringAppointments", fields: [doctorId], references: [id])
  departmentId        Int?
  department          Department?         @relation("DepartmentRecurringAppointments", fields: [departmentId], references: [id])
  frequency           String
  startDate           DateTime
  endDate             DateTime?
  occurrences         Int?
  appointments        Appointment[]       @relation("RecurringAppointmentAppointments")
  createdById         Int?                @unique
  createdBy           User?               @relation("RecurringAppointmentCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                @unique
  updatedBy           User?               @relation("RecurringAppointmentUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]          @relation("RecurringAppointmentAuditLogs")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}