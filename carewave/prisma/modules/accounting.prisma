enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
  REFUND
  ADJUSTMENT
  PAYROLL
  DEPRECIATION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  ON_HOLD
  PROCESSING
  REVERSED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_PAYMENT
  INSURANCE
  BANK_TRANSFER
  CHECK
  DIGITAL_WALLET
  CRYPTO
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum BudgetStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  CLOSED
}

enum ReconciliationStatus {
  PENDING
  RECONCILED
  DISCREPANCY
  UNDER_REVIEW
}

model Transaction {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  description       String
  amount            Float
  currency          String              @default("USD")
  type              TransactionType
  status            TransactionStatus
  paymentMethod     PaymentMethod?
  date              DateTime            @default(now())
  referenceNumber   String?             @unique
  taxAmount         Float?              @default(0.0)
  discountAmount    Float?              @default(0.0)
  costCenterId      Int?
  costCenter        CostCenter?         @relation(fields: [costCenterId], references: [id])
  patientId         Int?
  patient           Patient?            @relation("PatientTransactions", fields: [patientId], references: [id])
  invoiceId         Int?
  invoice           Invoice?            @relation("TransactionInvoices", fields: [invoiceId], references: [id])
  claimId           Int?
  claim             Claim?              @relation("TransactionClaims", fields: [claimId], references: [id])
  nhifClaimId       Int?
  nhifClaim         NhifClaim?          @relation("TransactionNhifClaims", fields: [nhifClaimId], references: [id])
  departmentId      Int?
  department        Department?         @relation(fields: [departmentId], references: [id])
  procurementId     Int?
  procurement       Procurement?        @relation("TransactionProcurement", fields: [procurementId], references: [id])
  fixedAssetId      Int?
  fixedAsset        FixedAsset?         @relation("TransactionFixedAssets", fields: [fixedAssetId], references: [id])
  createdById       Int?
  createdBy         User?               @relation("TransactionCreatedBy", fields: [createdById], references: [id])
  approvedById      Int?
  approvedBy        User?               @relation("TransactionApprovedBy", fields: [approvedById], references: [id])
  generalLedgerId   Int?
  generalLedger     GeneralLedger?      @relation("TransactionGeneralLedger", fields: [generalLedgerId], references: [id])
  budgetId          Int?
  budget            Budget?             @relation(fields: [budgetId], references: [id])
  reconciliations   Reconciliation[]    @relation("TransactionReconciliations")
  auditLogs         AuditLog[]          @relation("TransactionAuditLogs")
  taxCategoryId     Int?
  taxCategory       TaxCategory?        @relation(fields: [taxCategoryId], references: [id])
  paymentTerms      String?             // e.g., "Net 30", "Due on Receipt"
  dueDate           DateTime?
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  payrolls          Payroll[]           @relation("TransactionPayrolls")
}

model CostCenter {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  name              String
  code              String              @unique // e.g., "CC-CARDIO-001"
  description       String?
  departmentId      Int?
  department        Department?         @relation(fields: [departmentId], references: [id])
  transactions      Transaction[]
  budgetId          Int?
  budget            Budget?             @relation(fields: [budgetId], references: [id])
  managerId         Int?
  manager           User?               @relation(fields: [managerId], references: [id])
  parentCostCenterId Int?               // Hierarchical cost centers
  parentCostCenter  CostCenter?         @relation("CostCenterHierarchy", fields: [parentCostCenterId], references: [id])
  subCostCenters    CostCenter[]        @relation("CostCenterHierarchy")
  costAllocations   CostAllocation[]    @relation("CostCenterAllocations")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  auditLogs         AuditLog[]          @relation("CostCenterAuditLogs")
}

model Budget {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  name              String
  code              String              @unique // e.g., "BUD-2025-001"
  fiscalYear        Int
  amount            Float
  remainingAmount   Float
  departmentId      Int?
  department        Department?         @relation(fields: [departmentId], references: [id])
  costCenterId      Int?
  costCenter        CostCenter?         @relation(fields: [costCenterId], references: [id])
  transactions      Transaction[]
  createdById       Int?
  createdBy         User?               @relation("CreatedByUser", fields: [createdById], references: [id])
  approvedById      Int?
  approvedBy        User?               @relation("ApprovedByUser", fields: [approvedById], references: [id])
  status            BudgetStatus        @default(DRAFT)
  startDate         DateTime
  endDate           DateTime
  budgetItems       BudgetItem[]        @relation("BudgetItems")
  costAllocations   CostAllocation[]    @relation("BudgetAllocations")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  auditLogs         AuditLog[]          @relation("BudgetAuditLogs")
}

model BudgetItem {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  budgetId          Int
  budget            Budget              @relation("BudgetItems", fields: [budgetId], references: [id])
  name              String              // e.g., "Staff Salaries"
  amount            Float
  remainingAmount   Float
  category          String              // e.g., "Payroll", "Supplies"
  description       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Reconciliation {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  transactionId     Int
  transaction       Transaction         @relation("TransactionReconciliations", fields: [transactionId], references: [id])
  bankStatementId   Int?
  bankStatement     BankStatement?      @relation(fields: [bankStatementId], references: [id])
  reconciledDate    DateTime?
  status            ReconciliationStatus @default(PENDING)
  discrepancyAmount Float?              @default(0.0)
  notes             String?
  createdById       Int?
  createdBy         User?               @relation("CreatedByUser", fields: [createdById], references: [id])
  approvedById      Int?
  approvedBy        User?               @relation("ApprovedByUser", fields: [approvedById], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  auditLogs         AuditLog[]          @relation("ReconciliationAuditLogs")
}

model BankStatement {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  statementDate     DateTime
  referenceNumber   String              @unique
  amount            Float
  currency          String              @default("USD")
  bankAccountId     Int?
  bankAccount       BankAccount?        @relation(fields: [bankAccountId], references: [id])
  reconciliations   Reconciliation[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model BankAccount {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  accountNumber     String              @unique
  bankName          String
  branchName        String?
  accountType       String              // e.g., "Checking", "Savings"
  balance           Float               @default(0.0)
  currency          String              @default("USD")
  departmentId      Int?
  department        Department?         @relation(fields: [departmentId], references: [id])
  bankStatements    BankStatement[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  auditLogs         AuditLog[]          @relation("BankAccountAuditLogs")
}

model GeneralLedger {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  accountCode       String              @unique
  accountName       String
  accountType       AccountType
  balance           Float               @default(0.0)
  transactions      Transaction[]       @relation("TransactionGeneralLedger")
  departmentId      Int?
  department        Department?         @relation(fields: [departmentId], references: [id])
  parentAccountId   Int?                // Hierarchical chart of accounts
  parentAccount     GeneralLedger?      @relation("GeneralLedgerHierarchy", fields: [parentAccountId], references: [id])
  subAccounts       GeneralLedger[]     @relation("GeneralLedgerHierarchy")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  auditLogs         AuditLog[]          @relation("GeneralLedgerAuditLogs")
}

model TaxCategory {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  name              String              // e.g., "VAT", "Sales Tax"
  rate              Float               // e.g., 0.16 for 16%
  description       String?
  transactions      Transaction[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  auditLogs         AuditLog[]          @relation("TaxCategoryAuditLogs")
}

model CostAllocation {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  costCenterId      Int
  costCenter        CostCenter          @relation("CostCenterAllocations", fields: [costCenterId], references: [id])
  budgetId          Int?
  budget            Budget?             @relation("BudgetAllocations", fields: [budgetId], references: [id])
  amount            Float
  allocationDate    DateTime
  description       String?
  createdById       Int?
  createdBy         User?               @relation(fields: [createdById], references: [id])
  approvedById      Int?
  approvedBy        User?               @relation(fields: [approvedById], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  auditLogs         AuditLog[]          @relation("CostAllocationAuditLogs")
}

model Payroll {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  employeeId        Int
  employee          User                @relation("PayrollEmployee", fields: [employeeId], references: [id])
  transactionId     Int?
  transaction       Transaction?         @relation("TransactionPayrolls", fields: [transactionId], references: [id])
  grossAmount       Float
  netAmount         Float
  deductions        Float               @default(0.0)
  taxes             Float               @default(0.0)
  payPeriodStart    DateTime
  payPeriodEnd      DateTime
  paymentDate       DateTime
  status            TransactionStatus    @default(PENDING)
  paymentMethod     PaymentMethod
  departmentId      Int?
  department        Department?         @relation(fields: [departmentId], references: [id])
  costCenterId      Int?
  costCenter        CostCenter?         @relation(fields: [costCenterId], references: [id])
  createdById       Int?
  createdBy         User?               @relation("PayrollCreatedBy", fields: [createdById], references: [id])
  approvedById      Int?
  approvedBy        User?               @relation("PayrollApprovedBy", fields: [approvedById], references: [id])
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  auditLogs         AuditLog[]          @relation("PayrollAuditLogs")
}