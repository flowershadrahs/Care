// doctor.prisma
enum DoctorStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  SUSPENDED
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
  ON_CALL
  IN_SURGERY
}

enum QualificationType {
  DEGREE
  CERTIFICATION
  FELLOWSHIP
  LICENSE
}

model Doctor {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  doctorId            String                @unique // Internal doctor ID (e.g., "DOC-001")
  userId              Int?                  // Link to user account
  user                User?                 @relation("DoctorUser", fields: [userId], references: [id])
  name                String                // Full name
  email               String?               @unique // Professional email
  phone               String?               // Contact number
  specialty           String                // e.g., "Cardiology", "Neurology"
  licenseNumber       String                @unique // Medical license number
  office              String?               // Office location (e.g., "Room 203, Building A")
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  status              DoctorStatus          @default("ACTIVE")
  hireDate            DateTime?             // Date of hiring
  biography           String?               // Professional bio or description
  qualifications      String?               // JSON or text for qualifications (e.g., ["MD", "PhD"])
  profileImage        String?               // Path to profile image
  consultationFee     Float?                // Standard consultation fee
  maxPatientsPerSlot  Int?                  // Max patients per appointment slot
  clinicalSettingId   Int?                  // Link to clinical setting
  clinicalSetting     ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  admissions          Admission[]           @relation("DoctorAdmissions")
  discharges          Discharge[]           @relation("DischargingDoctor")
  appointments        Appointment[]         @relation("DoctorAppointments")
  availability        DoctorAvailability[]  // Doctor's availability schedule
  prescriptions       Prescription[]        @relation("Prescriptions")
  clinicalRecords     ClinicalRecord[]      @relation("DoctorClinicalRecords")
  laboratoryOrders    Laboratory[]          // Lab tests ordered by doctor
  radiologyOrders     Radiology[]           // Radiology tests ordered by doctor
  operationTheatres   OperationTheatre[]    // Surgeries performed by doctor
  nursingRecords      Nursing[]             // Nursing care overseen by doctor
  maternityRecords    Maternity[]           // Maternity cases handled by doctor
  vaccinationRecords  Vaccination[]         // Vaccinations administered by doctor
  helpdeskTickets     Helpdesk[]            // Helpdesk tickets assigned to doctor
  createdById         Int?                  // User who created doctor record
  createdBy           User?                 @relation("DoctorCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("DoctorUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("DoctorAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model DoctorAvailability {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  doctorId            Int                   // Link to doctor
  doctor              Doctor                @relation(fields: [doctorId], references: [id])
  startTime           DateTime              // Start of availability slot
  endTime             DateTime              // End of availability slot
  status              AvailabilityStatus    @default("AVAILABLE")
  location            String?               // e.g., "Clinic A", "Teleconsultation"
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  clinicalSettingId   Int?                  // Link to clinical setting
  clinicalSetting     ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  appointmentId       Int?                  // Link to appointment (if booked)
  appointment         Appointment?          @relation(fields: [appointmentId], references: [id])
  operationTheatreId  Int?                  // Link to operation theatre for surgical slots
  operationTheatre    OperationTheatre?     @relation(fields: [operationTheatreId], references: [id])
  notes               String?               // Notes for availability (e.g., "On-call for emergencies")
  isRecurring         Boolean               @default(false) // Recurring schedule (e.g., weekly)
  recurrenceRule      String?               // JSON or text for recurrence (e.g., "Every Monday 9AM-12PM")
  createdById         Int?                  // User who created availability
  createdBy           User?                 @relation("AvailabilityCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("AvailabilityUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("DoctorAvailabilityAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}