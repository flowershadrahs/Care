enum ClinicalRecordType {
  CONSULTATION
  PROCEDURE
  DIAGNOSIS
  TREATMENT_PLAN
  OBSERVATION
  PROGRESS_NOTE
  DISCHARGE_SUMMARY
  ALLERGY
  IMMUNIZATION
}

enum ClinicalStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
  PENDING_REVIEW
  ARCHIVED
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  READ
}

model ClinicalRecord {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  patientId             Int
  patient               Patient             @relation(fields: [patientId], references: [id])
  doctorId              Int?                // Link to doctor
  doctor                Doctor?             @relation("DoctorClinicalRecords", fields: [doctorId], references: [id])
  appointmentId         Int?                // Link to appointment
  appointment           Appointment?        @relation(fields: [appointmentId], references: [id])
  admissionId           Int?                // Link to admission
  admission             Admission?          @relation(fields: [admissionId], references: [id])
  medicalRecordId       Int?                // Link to medical record
  medicalRecord         MedicalRecord?      @relation(fields: [medicalRecordId], references: [id])
  clinicalSettingId     Int?                // Link to clinical setting
  clinicalSetting       ClinicalSetting?    @relation(fields: [clinicalSettingId], references: [id])
  departmentId          Int?                // Link to department
  department            Department?         @relation(fields: [departmentId], references: [id])
  type                  ClinicalRecordType
  status                ClinicalStatus      @default(DRAFT)
  diagnosis             String?             // JSON for diagnosis details (ICD-10 codes, descriptions)
  treatmentPlan         String?             // JSON for treatment plan (medications, procedures)
  procedureDetails      String?             // JSON for procedure details (e.g., CPT codes)
  observationNotes      String?             // Observation notes
  vitals                String?             // JSON for vital signs (e.g., {"bp": "120/80", "pulse": 72})
  allergies              String?             // JSON for allergies (e.g., {"drug": "Penicillin", "reaction": "Rash"})
  immunizationHistory    String?             // JSON for immunization history
  laboratoryId          Int?                // Link to lab tests ordered
  laboratory            Laboratory?         @relation(fields: [laboratoryId], references: [id])
  radiologyId           Int?                // Link to radiology tests ordered
  radiology             Radiology?          @relation(fields: [radiologyId], references: [id])
  pharmacyId            Int?                // Link to prescriptions
  pharmacy              Pharmacy?           @relation(fields: [pharmacyId], references: [id])
  operationTheatreId    Int?                // Link to surgical procedures
  operationTheatre      OperationTheatre?   @relation(fields: [operationTheatreId], references: [id])
  nursingId             Int?                // Link to nursing care provided
  nursing               Nursing?            @relation(fields: [nursingId], references: [id])
  billingId             Int?                // Link to billing for clinical services
  billing               Billing?            @relation(fields: [billingId], references: [id])
  claimId               Int?                // Link to insurance claim
  claim                 Claim?              @relation(fields: [claimId], references: [id])
  encounterDate         DateTime?           // Date of clinical encounter
  location              String?             // Location of encounter (e.g., "Room 101")
  clinicalNotes         String?             // General clinical notes
  createdById           Int?                // User who created the record
  createdBy             User?               @relation("ClinicalRecordCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation("ClinicalRecordUpdatedBy", fields: [updatedById], references: [id])
  reviewedById          Int?                // User who reviewed the record
  reviewedBy            User?               @relation("ClinicalRecordReviewedBy", fields: [reviewedById], references: [id])
  auditLogs             AuditLog[]          @relation("ClinicalRecordAuditLogs")
  clinicalDocuments     ClinicalDocument[]  @relation("ClinicalRecordDocuments")
  clinicalNotifications ClinicalNotification[] @relation("ClinicalRecordNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model ClinicalDocument {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  clinicalRecordId      Int
  clinicalRecord        ClinicalRecord      @relation("ClinicalRecordDocuments", fields: [clinicalRecordId], references: [id])
  documentType          String              // e.g., "Lab Report", "Imaging Result", "Consent Form"
  filePath              String              // Path to stored document
  description           String?             // Description of document
  uploadedById          Int?                // User who uploaded document
  uploadedBy            User?               @relation(fields: [uploadedById], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  auditLogs             AuditLog[]          @relation("ClinicalDocumentAuditLogs")
}

model ClinicalNotification {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  clinicalRecordId      Int
  clinicalRecord        ClinicalRecord      @relation("ClinicalRecordNotifications", fields: [clinicalRecordId], references: [id])
  notificationType      String              // e.g., "SMS", "Email", "App Push"
  status                NotificationStatus  @default(PENDING)
  sentAt                DateTime?
  recipientId           Int?                // User or patient receiving notification
  recipient             User?               @relation(fields: [recipientId], references: [id])
  message               String?             // Notification content
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}