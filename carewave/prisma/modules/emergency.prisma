enum EmergencyStatus {
  PENDING
  ACTIVE
  STABILIZED
  TRANSFERRED
  DISCHARGED
  CANCELLED
}

enum TriagePriority {
  EMERGENCY
  URGENT
  NON_URGENT
  CRITICAL
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  READ
}

model Emergency {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  patientId             Int
  patient               Patient             @relation(fields: [patientId], references: [id])
  doctorId              Int?                // Link to attending doctor
  doctor                Doctor?             @relation("DoctorEmergencies", fields: [doctorId], references: [id])
  admissionId           Int?                // Link to admission
  admission             Admission?          @relation(fields: [admissionId], references: [id])
  departmentId          Int?                // Link to department (e.g., Emergency Department)
  department            Department?         @relation(fields: [departmentId], references: [id])
  clinicalSettingId     Int?                // Link to clinical setting
  clinicalSetting       ClinicalSetting?    @relation(fields: [clinicalSettingId], references: [id])
  triagePriority        TriagePriority      // Priority level
  triageNotes           String?             // Notes from triage
  triageDate            DateTime?           // Date and time of triage
  status                EmergencyStatus     @default(PENDING)
  incidentDate          DateTime            @default(now()) // Date and time of emergency incident
  presentingComplaints  String?             // Patient's chief complaints
  initialAssessment     String?             // JSON or text for initial assessment details
  treatmentProvided     String?             // JSON or text for treatments provided
  laboratoryId          Int?                // Link to lab tests ordered
  laboratory            Laboratory?         @relation(fields: [laboratoryId], references: [id])
  radiologyId           Int?                // Link to radiology tests ordered
  radiology             Radiology?          @relation(fields: [radiologyId], references: [id])
  pharmacyId            Int?                // Link to prescriptions
  pharmacy              Pharmacy?           @relation(fields: [pharmacyId], references: [id])
  operationTheatreId    Int?                // Link to surgical procedures
  operationTheatre      OperationTheatre?   @relation(fields: [operationTheatreId], references: [id])
  billingId             Int?                // Link to billing for emergency services
  billing               Billing?            @relation(fields: [billingId], references: [id])
  claimId               Int?                // Link to insurance claim
  claim                 Claim?              @relation(fields: [claimId], references: [id])
  wardId                Int?                // Link to ward for transfer
  ward                  Ward?               @relation(fields: [wardId], references: [id])
  bedId                 Int?                // Link to specific bed
  bed                   Bed?                @relation(fields: [bedId], references: [id])
  transferReason        String?             // Reason for transfer (if applicable)
  transferDate          DateTime?           // Date of transfer
  dischargeDate         DateTime?           // Date of discharge
  dischargeNotes        String?             // Notes at discharge
  createdById           Int?                // User who created the emergency record
  createdBy             User?               @relation("EmergencyCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation("EmergencyUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("EmergencyAuditLogs")
  emergencyDocuments    EmergencyDocument[] @relation("EmergencyDocuments")
  emergencyNotifications EmergencyNotification[] @relation("EmergencyNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model EmergencyDocument {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  emergencyId           Int
  emergency             Emergency           @relation("EmergencyDocuments", fields: [emergencyId], references: [id])
  documentType          String              // e.g., "Triage Report", "Consent Form"
  filePath              String              // Path to stored document
  description           String?             // Description of document
  uploadedById          Int?                // User who uploaded document
  uploadedBy            User?               @relation(fields: [uploadedById], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  auditLogs             AuditLog[]          @relation("EmergencyDocumentAuditLogs")
}

model EmergencyNotification {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  emergencyId           Int
  emergency             Emergency           @relation("EmergencyNotifications", fields: [emergencyId], references: [id])
  notificationType      String              // e.g., "SMS", "Email", "App Push"
  status                NotificationStatus  @default(PENDING)
  sentAt                DateTime?
  recipientId           Int?                // User or patient receiving notification
  recipient             User?               @relation(fields: [recipientId], references: [id])
  message               String?             // Notification content
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}