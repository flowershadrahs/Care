// =========================================
// AUTO-GENERATED PRISMA SCHEMA
// DO NOT EDIT THIS FILE DIRECTLY!
// Edit individual module files in /modules instead
// Generated at: 2025-07-09T17:50:40.621Z
// =========================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


// =========================================
// DASHBOARD
// =========================================

// dashboard.prisma
enum DashboardWidgetType {
  CHART
  TABLE
  METRIC
  CALENDAR
  ALERT
  SUMMARY
}

enum DashboardAccessLevel {
  PUBLIC
  ROLE_BASED
  PRIVATE
}

model Dashboard {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  name                String                // e.g., "Admin Overview Dashboard"
  description         String?               // Description of dashboard purpose
  accessLevel         DashboardAccessLevel  @default(PRIVATE) // PUBLIC, ROLE_BASED, PRIVATE
  role                String?               // Role for ROLE_BASED access (e.g., "ADMIN", "DOCTOR")
  userId              Int?                  // Link to user for private dashboards
  user                User?                 @relation("DashboardOwner", fields: [userId], references: [id])
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  widgets             DashboardWidget[]     // Widgets included in the dashboard
  layout              String?               // JSON for widget layout configuration
  isDefault           Boolean               @default(false) // Default dashboard for role/user
  filters             String?               // JSON for default filters (e.g., date range, department)
  createdById         Int?                  // User who created the dashboard
  createdBy           User?                 @relation("DashboardCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("DashboardUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("DashboardAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model DashboardWidget {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  dashboardId         Int                   // Link to dashboard
  dashboard           Dashboard             @relation(fields: [dashboardId], references: [id])
  type                DashboardWidgetType   // CHART, TABLE, METRIC, etc.
  title               String                // Widget title (e.g., "Patient Admissions")
  dataSource          String?               // Source of data (e.g., "appointments", "billing")
  configuration       String?               // JSON for widget config (e.g., chart type, columns)
  appointmentId       Int?                  // Link to appointment data
  appointment         Appointment?          @relation(fields: [appointmentId], references: [id])
  admissionId         Int?                  // Link to admission data
  admission           Admission?            @relation(fields: [admissionId], references: [id])
  billingId           Int?                  // Link to billing data
  billing             Billing?              @relation(fields: [billingId], references: [id])
  laboratoryId        Int?                  // Link to lab data
  laboratory          Laboratory?           @relation(fields: [laboratoryId], references: [id])
  radiologyId         Int?                  // Link to radiology data
  radiology           Radiology?            @relation(fields: [radiologyId], references: [id])
  pharmacyId          Int?                  // Link to pharmacy data
  pharmacy            Pharmacy?             @relation(fields: [pharmacyId], references: [id])
  operationTheatreId  Int?                  // Link to operation theatre data
  operationTheatre    OperationTheatre?     @relation(fields: [operationTheatreId], references: [id])
  queueId             Int?                  // Link to queue data
  queue               Queue?                @relation(fields: [queueId], references: [id])
  inventoryId         Int?                  // Link to inventory data
  inventory           Inventory?            @relation(fields: [inventoryId], references: [id])
  claimId             Int?                  // Link to claim data
  claim               Claim?                @relation(fields: [claimId], references: [id])
  nhifClaimId         Int?                  // Link to NHIF claim data
  nhifClaim           NhifClaim?            @relation(fields: [nhifClaimId], references: [id])
  medicalRecordId     Int?                  // Link to medical record data
  medicalRecord       MedicalRecord?        @relation(fields: [medicalRecordId], references: [id])
  positionX           Int                   // X position in dashboard grid
  positionY           Int                   // Y position in dashboard grid
  width               Int                   // Widget width in grid units
  height              Int                   // Widget height in grid units
  refreshInterval     Int?                  // Auto-refresh interval in seconds
  createdById         Int?                  // User who created the widget
  createdBy           User?                 @relation("WidgetCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("WidgetUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("DashboardWidgetAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

// =========================================
// PATIENTS
// =========================================

// patients.prisma
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum PatientStatus {
  ACTIVE
  INACTIVE
  DECEASED
  TRANSFERRED
}

model Patient {
  id                    Int                   @id @default(autoincrement())
  uuid                  String                @unique @default(uuid())
  patientId             String                @unique // Unique patient identifier (e.g., "PAT-2025-001")
  userId                Int?                  // Link to user account for patient portal access
  user                  User?                 @relation("PatientUser", fields: [userId], references: [id])
  name                  String?               // Full name
  email                 String?               @unique // Patient email
  dateOfBirth           DateTime?             // Date of birth
  gender                Gender?               // MALE, FEMALE, OTHER
  phone                 String?               // Primary contact number
  address               String?               // Physical address
  emergencyContact      String?               // Emergency contact name
  emergencyContactPhone String?               // Emergency contact phone
  insuranceProvider     String?               // e.g., "NHIF", "Aetna"
  insurancePolicy       String?               // Insurance policy number
  nhifNumber            String?               @unique // NHIF membership number
  bloodType             BloodType?            // Blood type
  allergies             String?               // JSON or text for allergies
  medicalHistory        String?               // JSON or text for medical history
  presentingComplaint   String?               // Current chief complaint
  familyHistory         String?               // Family medical history
  socialHistory         String?               // Social history (e.g., smoking, alcohol)
  pastMedicalHistory    String?               // Past medical history
  medications           String?               // Current medications
  status                PatientStatus         @default(ACTIVE)
  registrationDate      DateTime              @default(now()) // Date of registration
  lastVisitDate        DateTime?             // Date of last visit
  preferredDoctorId    Int?                  // Link to preferred doctor
  preferredDoctor      Doctor?               @relation("PreferredDoctor", fields: [preferredDoctorId], references: [id])
  departmentId          Int?                  // Link to primary department
  department           Department?           @relation(fields: [departmentId], references: [id])
  admissions           Admission[]           // Admissions for patient
  discharges           Discharge[]           @relation("DischargedPatient")
  transactions         Transaction[]         @relation("PatientTransactions")
  appointments         Appointment[]         @relation("PatientAppointments")
  prescriptions        Prescription[]        @relation("Prescriptions")
  medicalRecords       MedicalRecord[]       @relation("PatientMedicalRecords")
  laboratoryTests      Laboratory[]          // Lab tests for patient
  radiologyTests       Radiology[]           // Radiology tests for patient
  pharmacyRecords      Pharmacy[]            // Pharmacy records for patient
  operationProcedures  SurgicalProcedure[]   // Surgical procedures for patient
  nursingCare          NursingCare[]         // Nursing care records
  maternityRecords     Maternity[]           // Maternity records
  vaccinationRecords   Vaccination[]         // Vaccination records
  claims               Claim[]               // Insurance claims
  nhifClaims           NhifClaim[]           // NHIF claims
  referrals            Referral[]            // Referrals involving patient
  helpdeskTickets      Helpdesk[]            // Helpdesk tickets raised by patient
  billingRecords       Billing[]             // Billing records for patient
  documents            String?               // JSON or file paths for patient documents
  consentForms         String?               // JSON or text for signed consent forms
  createdById          Int?                  // User who created patient record
  createdBy            User?                 @relation("PatientCreatedBy", fields: [createdById], references: [id])
  updatedById          Int?                  // User who last updated
  updatedBy            User?                 @relation("PatientUpdatedBy", fields: [updatedById], references: [id])
  auditLogs            AuditLog[]            @relation("PatientAuditLogs")
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

// =========================================
// DOCTOR
// =========================================

enum DoctorStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  SUSPENDED
  RETIRED
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
  ON_CALL
  IN_SURGERY
  ON_BREAK
}

enum QualificationType {
  DEGREE
  CERTIFICATION
  FELLOWSHIP
  LICENSE
  DIPLOMA
}


model Doctor {
  id                    Int                   @id @default(autoincrement())
  uuid                  String                @unique @default(uuid())
  doctorId              String                @unique // e.g., "DOC-001"
  userId                Int?                  // Link to user account
  user                  User?                 @relation("DoctorUser", fields: [userId], references: [id])
  firstName             String                // Doctor's first name
  lastName              String                // Doctor's last name
  email                 String?               @unique // Professional email
  phone                 String?               // Contact number
  specialty             String                // e.g., "Cardiology", "Neurology"
  licenseNumber         String                @unique // Medical license number
  office                String?               // e.g., "Room 203, Building A"
  departmentId          Int?                  // Link to department
  department            Department?           @relation(fields: [departmentId], references: [id])
  status                DoctorStatus          @default(ACTIVE)
  hireDate              DateTime?             // Date of hiring
  biography             String?               // Professional bio
  qualifications        String?               // JSON for qualifications (e.g., [{"type": "DEGREE", "name": "MD"}])
  profileImage          String?               // Path to profile image
  consultationFee       Float?                // Standard consultation fee
  maxPatientsPerSlot    Int?                  // Max patients per appointment slot
  clinicalSettingId     Int?                  // Link to clinical setting
  clinicalSetting       ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  admissions            Admission[]           @relation("DoctorAdmissions")
  discharges            Discharge[]           @relation("DischargingDoctor")
  appointments          Appointment[]         @relation("DoctorAppointments")
  availability          DoctorAvailability[]  @relation("DoctorAvailability")
  prescriptions         Prescription[]        @relation("Prescriptions")
  clinicalRecords       ClinicalRecord[]      @relation("DoctorClinicalRecords")
  laboratoryOrders      Laboratory[]          @relation("LaboratoryOrders")
  radiologyOrders       Radiology[]           @relation("RadiologyOrders")
  operationTheatres     OperationTheatre[]    @relation("DoctorOperationTheatres")
  nursingRecords        Nursing[]             @relation("DoctorNursingRecords")
  maternityRecords      Maternity[]           @relation("DoctorMaternityRecords")
  vaccinationRecords    Vaccination[]         @relation("DoctorVaccinationRecords")
  helpdeskTickets       Helpdesk[]            @relation("DoctorHelpdeskTickets")
  doctorQualifications  DoctorQualification[] @relation("DoctorQualifications")
  doctorNotifications   DoctorNotification[]  @relation("DoctorNotifications")
  createdById           Int?                  // User who created doctor record
  createdBy             User?                 @relation("DoctorCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                  // User who last updated
  updatedBy             User?                 @relation("DoctorUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]            @relation("DoctorAuditLogs")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model DoctorAvailability {
  id                    Int                   @id @default(autoincrement())
  uuid                  String                @unique @default(uuid())
  doctorId              Int
  doctor                Doctor                @relation("DoctorAvailability", fields: [doctorId], references: [id])
  startTime             DateTime
  endTime               DateTime
  status                AvailabilityStatus    @default(AVAILABLE)
  location              String?               // e.g., "Clinic A", "Teleconsultation"
  departmentId          Int?                  // Link to department
  department            Department?           @relation(fields: [departmentId], references: [id])
  clinicalSettingId     Int?                  // Link to clinical setting
  clinicalSetting       ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  appointmentId         Int?                  // Link to appointment (if booked)
  appointment           Appointment?          @relation(fields: [appointmentId], references: [id])
  operationTheatreId    Int?                  // Link to operation theatre for surgical slots
  operationTheatre      OperationTheatre?     @relation(fields: [operationTheatreId], references: [id])
  notes                 String?               // Notes for availability
  isRecurring           Boolean               @default(false)
  recurrenceRule        String?               // JSON for recurrence (e.g., {"frequency": "WEEKLY", "days": ["MON"]})
  recurrenceEndDate     DateTime?             // End date for recurring schedule
  createdById           Int?                  // User who created availability
  createdBy             User?                 @relation(fields: [createdById], references: [id])
  updatedById           Int?                  // User who last updated
  updatedBy             User?                 @relation(fields: [updatedById], references: [id])
  auditLogs             AuditLog[]            @relation("DoctorAvailabilityAuditLogs")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model DoctorQualification {
  id                    Int                   @id @default(autoincrement())
  uuid                  String                @unique @default(uuid())
  doctorId              Int
  doctor                Doctor                @relation("DoctorQualifications", fields: [doctorId], references: [id])
  qualificationType     QualificationType
  qualificationName     String                // e.g., "MD", "Board Certification in Cardiology"
  institution           String?               // Issuing institution
  issueDate             DateTime?             // Date qualification was issued
  expiryDate            DateTime?             // Expiry date (if applicable, e.g., for licenses)
  documentPath          String?               // Path to stored qualification document
  createdById           Int?                  // User who added qualification
  createdBy             User?                 @relation(fields: [createdById], references: [id])
  updatedById           Int?                  // User who last updated
  updatedBy             User?                 @relation(fields: [updatedById], references: [id])
  auditLogs             AuditLog[]            @relation("DoctorQualificationAuditLogs")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model DoctorNotification {
  id                    Int                   @id @default(autoincrement())
  uuid                  String                @unique @default(uuid())
  doctorId              Int
  doctor                Doctor                @relation("DoctorNotifications", fields: [doctorId], references: [id])
  notificationType      String                // e.g., "SMS", "Email", "App Push"
  status                NotificationStatus    @default(PENDING)
  sentAt                DateTime?
  message               String?               // Notification content
  recipientId           Int?                  // User or doctor receiving notification
  recipient             User?                 @relation(fields: [recipientId], references: [id])
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

// =========================================
// APPOINTMENTS
// =========================================

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
  PENDING_CONFIRMATION
}

enum AppointmentType {
  REGULAR
  WALK_IN
  EMERGENCY
  TELECONSULTATION
  FOLLOW_UP
  PRE_ADMISSION
  POST_DISCHARGE
  SPECIALIST_CONSULT
}




model Appointment {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  patientId             Int
  patient               Patient             @relation("PatientAppointments", fields: [patientId], references: [id])
  doctorId              Int?
  doctor                Doctor?             @relation("DoctorAppointments", fields: [doctorId], references: [id])
  departmentId          Int?
  department            Department?         @relation(fields: [departmentId], references: [id])
  bookedById            Int?
  bookedBy              User?               @relation("BookedBy", fields: [bookedById], references: [id])
  date                  DateTime
  endDate               DateTime?           // For appointments with duration
  status                AppointmentStatus   @default(SCHEDULED)
  type                  AppointmentType     @default(REGULAR)
  reason                String
  notes                 String?
  checkInTime           DateTime?
  checkOutTime          DateTime?
  reminderSent          Boolean             @default(false)
  reminderDate          DateTime?
  medicalRecordId       Int?
  medicalRecord         MedicalRecord?      @relation(fields: [medicalRecordId], references: [id])
  billingId             Int?
  billing               Billing?            @relation(fields: [billingId], references: [id])
  queueId               Int?                @unique
  queue                 Queue?              @relation(fields: [queueId], references: [id])
  admissionId           Int?
  admission             Admission?          @relation(fields: [admissionId], references: [id])
  dischargeId           Int?
  discharge             Discharge?          @relation(fields: [dischargeId], references: [id])
  laboratoryId          Int?
  laboratory            Laboratory?         @relation(fields: [laboratoryId], references: [id])
  radiologyId           Int?
  radiology             Radiology?          @relation(fields: [radiologyId], references: [id])
  pharmacyId            Int?
  pharmacy              Pharmacy?           @relation(fields: [pharmacyId], references: [id])
  operationTheatreId    Int?
  operationTheatre      OperationTheatre?   @relation(fields: [operationTheatreId], references: [id])
  createdById           Int?
  createdBy             User?               @relation("AppointmentCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?
  updatedBy             User?               @relation("AppointmentUpdatedBy", fields: [updatedById], references: [id])
  insuranceId           Int?                // Link to insurance for coverage verification
  insurance             Insurance?          @relation(fields: [insuranceId], references: [id])
  referralId            Int?                // Link to referral for specialist appointments
  referral              Referral?           @relation(fields: [referralId], references: [id])
  location              String?             // Physical or virtual location (e.g., "Room 101", "Zoom Link")
  teleconsultationLink  String?             // Link for teleconsultation
  duration              Int?                // Duration in minutes
  cancellationReason    String?             // Reason for cancellation
  cancellationDate      DateTime?           // Date of cancellation
  rescheduleCount       Int                 @default(0) // Track reschedule attempts
  priority              TriagePriority?     // Priority for emergency cases
  notifications         AppointmentNotification[] @relation("AppointmentNotifications")
  auditLogs             AuditLog[]          @relation("AppointmentAuditLogs")
  appointmentDocuments  AppointmentDocument[] @relation("AppointmentDocuments")
  recurringAppointmentId Int?               // Link to recurring appointment series
  recurringAppointment   RecurringAppointment? @relation(fields: [recurringAppointmentId], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}



model AppointmentNotification {
  id                  Int                 @id @default(autoincrement())
  uuid                String              @unique @default(uuid())
  appointmentId       Int
  appointment         Appointment         @relation("AppointmentNotifications", fields: [appointmentId], references: [id])
  notificationType    String              // e.g., "SMS", "Email", "App Push"
  status              NotificationStatus  @default(PENDING)
  sentAt              DateTime?
  recipientId         Int?                // User or patient receiving notification
  recipient           User?               @relation(fields: [recipientId], references: [id])
  message             String?             // Notification content
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}


model AppointmentDocument {
  id                  Int                 @id @default(autoincrement())
  uuid                String              @unique @default(uuid())
  appointmentId       Int
  appointment         Appointment         @relation("AppointmentDocuments", fields: [appointmentId], references: [id])
  documentType        String              // e.g., "Consent Form", "Referral Letter"
  filePath            String              // Path to stored document
  uploadedById        Int?                // User who uploaded document
  uploadedBy          User?               @relation(fields: [uploadedById], references: [id])
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  auditLogs           AuditLog[]          @relation("AppointmentDocumentAuditLogs")
}


model RecurringAppointment {
  id                  Int                 @id @default(autoincrement())
  uuid                String              @unique @default(uuid())
  patientId           Int
  patient             Patient             @relation(fields: [patientId], references: [id])
  doctorId            Int?
  doctor              Doctor?             @relation(fields: [doctorId], references: [id])
  departmentId        Int?
  department          Department?         @relation(fields: [departmentId], references: [id])
  frequency           String              // e.g., "Weekly", "Monthly"
  startDate           DateTime
  endDate             DateTime?
  occurrences         Int?                // Number of occurrences
  appointments        Appointment[]       @relation
  createdById         Int?                // User who created recurring appointment
  createdBy           User?               @relation(fields: [createdById], references: [id])
  updatedById         Int?                // User who last updated
  updatedBy           User?               @relation(fields: [updatedById], references: [id])
  auditLogs           AuditLog[]          @relation("RecurringAppointmentAuditLogs")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

// =========================================
// ADT
// =========================================

enum AdmissionStatus {
  PENDING
  ADMITTED
  DISCHARGED
  CANCELLED
  ON_HOLD
  TRANSFERRED
  AWAITING_BED
}

enum TriagePriority {
  EMERGENCY
  URGENT
  NON_URGENT
  CRITICAL
}

enum BedStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
  UNDER_CLEANING
}

enum DischargeType {
  ROUTINE
  AGAINST_MEDICAL_ADVICE
  TRANSFER
  DECEASED
}

model Admission {
  id                   Int                 @id @default(autoincrement())
  uuid                 String              @unique @default(uuid())
  patientId            Int
  patient              Patient             @relation(fields: [patientId], references: [id])
  doctorId             Int?
  doctor               Doctor?             @relation("DoctorAdmissions", fields: [doctorId], references: [id])
  wardId               Int?
  ward                 Ward?               @relation(fields: [wardId], references: [id])
  bedId                Int?
  bed                  Bed?                @relation(fields: [bedId], references: [id])
  admissionDate        DateTime            @default(now())
  scheduledDate        DateTime?           // For planned admissions
  preAdmissionNotes    String?             // Notes before admission
  presentingComplaints String?             // Patient's chief complaints
  relayedInfo          String?             // Information from referring facility
  triagePriority       TriagePriority?     // EMERGENCY, URGENT, NON_URGENT, CRITICAL
  triageNotes          String?             // Notes from triage
  triageDate           DateTime?           // Date of triage
  status               AdmissionStatus     @default(PENDING)
  dischargeDate        DateTime?           // Date of discharge
  dischargeNotes       String?             // Notes at discharge
  emergencyId          Int?                // Link to emergency case
  emergency            Emergency?          @relation(fields: [emergencyId], references: [id])
  billingId            Int?                // Link to billing for admission charges
  billing              Billing?            @relation(fields: [billingId], references: [id])
  medicalRecordId      Int?                // Link to medical records
  medicalRecord        MedicalRecord?      @relation(fields: [medicalRecordId], references: [id])
  queueId              Int?                // Link to queue management
  queue                Queue?              @relation(fields: [queueId], references: [id])
  departmentId         Int?                // Link to department
  department           Department?         @relation(fields: [departmentId], references: [id])
  admissionType        String?             // e.g., "Inpatient", "Outpatient", "Daycare"
  referralId           Int?                // Link to referral
  referral             Referral?           @relation(fields: [referralId], references: [id])
  insuranceId          Int?                // Link to insurance details
  insurance            Insurance?          @relation(fields: [insuranceId], references: [id])
  createdById          Int?                // User who created admission
  createdBy            User?               @relation("AdmissionCreatedBy", fields: [createdById], references: [id])
  updatedById          Int?                // User who last updated
  updatedBy            User?               @relation("AdmissionUpdatedBy", fields: [updatedById], references: [id])
  auditLogs            AuditLog[]          @relation("AdmissionAuditLogs")
  transfers            Transfer[]          @relation("AdmissionTransfers")
  discharge            Discharge?          @relation("AdmissionDischarge")
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Discharge {
  id                   Int                 @id @default(autoincrement())
  uuid                 String              @unique @default(uuid())
  patientId            Int
  patient              Patient             @relation("DischargedPatient", fields: [patientId], references: [id])
  doctorId             Int
  doctor               Doctor              @relation("DischargingDoctor", fields: [doctorId], references: [id])
  admissionId          Int?                @unique
  admission            Admission?          @relation("AdmissionDischarge", fields: [admissionId], references: [id])
  dischargeDate        DateTime            @default(now())
  dischargeType        DischargeType       // ROUTINE, AGAINST_MEDICAL_ADVICE, TRANSFER, DECEASED
  dischargeNotes       String?             // Clinical notes at discharge
  followUpInstructions String?             // Post-discharge care instructions
  medications          String?             // Prescribed medications
  pharmacyId           Int?                // Link to pharmacy for discharge medications
  pharmacy             Pharmacy?           @relation(fields: [pharmacyId], references: [id])
  billingId            Int?                // Link to final billing
  billing              Billing?            @relation(fields: [billingId], references: [id])
  medicalRecordId      Int?                // Link to medical records
  medicalRecord        MedicalRecord?      @relation(fields: [medicalRecordId], references: [id])
  appointmentId        Int?                // Link to follow-up appointment
  appointment          Appointment?        @relation(fields: [appointmentId], references: [id])
  socialServiceId      Int?                // Link to social services for post-discharge support
  socialService        SocialService?      @relation(fields: [socialServiceId], references: [id])
  createdById          Int?                // User who created discharge
  createdBy            User?               @relation("DischargeCreatedBy", fields: [createdById], references: [id])
  approvedById         Int?                // User who approved discharge
  approvedBy           User?               @relation("DischargeApprovedBy", fields: [approvedById], references: [id])
  auditLogs            AuditLog[]          @relation("DischargeAuditLogs")
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Ward {
  id                   Int                 @id @default(autoincrement())
  uuid                 String              @unique @default(uuid())
  name                 String              // e.g., "General Ward"
  wardNumber           String              @unique // e.g., "W-101"
  totalBeds            Int                 // Total capacity
  occupiedBeds         Int                 @default(0) // Current occupancy
  departmentId         Int?                // Link to department
  department           Department?         @relation(fields: [departmentId], references: [id])
  location             String?             // e.g., "Building A, Floor 3"
  nurseInChargeId      Int?                // Nurse responsible for ward
  nurseInCharge        User?               @relation("WardNurseInCharge", fields: [nurseInChargeId], references: [id])
  wardType             String?             // e.g., "ICU", "General", "Pediatric"
  capacityStatus       String?             // e.g., "Full", "Available", "Overcapacity"
  beds                 Bed[]               // Beds in the ward
  admissions           Admission[]         // Admissions to this ward
  transfers            Transfer[]          @relation("WardTransfers")
  createdById          Int?                // User who created ward
  createdBy            User?               @relation("WardCreatedBy", fields: [createdById], references: [id])
  updatedById          Int?                // User who last updated
  updatedBy            User?               @relation("WardUpdatedBy", fields: [updatedById], references: [id])
  auditLogs            AuditLog[]          @relation("WardAuditLogs")
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Bed {
  id                   Int                 @id @default(autoincrement())
  uuid                 String              @unique @default(uuid())
  bedNumber            String              @unique // e.g., "B-101"
  wardId               Int
  ward                 Ward                @relation(fields: [wardId], references: [id])
  status               BedStatus           @default(AVAILABLE)
  bedType              String?             // e.g., "Standard", "ICU", "Pediatric"
  admissionId          Int?                // Link to admission
  admission            Admission?          @relation(fields: [admissionId], references: [id])
  lastCleaned          DateTime?           // Last cleaning timestamp
  maintenanceNotes     String?             // Notes for maintenance issues
  createdById          Int?                // User who created bed
  createdBy            User?               @relation(fields: [createdById], references: [id])
  updatedById          Int?                // User who last updated
  updatedBy            User?               @relation(fields: [updatedById], references: [id])
  auditLogs            AuditLog[]          @relation("BedAuditLogs")
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Transfer {
  id                   Int                 @id @default(autoincrement())
  uuid                 String              @unique @default(uuid())
  patientId            Int
  patient              Patient             @relation(fields: [patientId], references: [id])
  admissionId          Int
  admission            Admission           @relation("AdmissionTransfers", fields: [admissionId], references: [id])
  fromWardId           Int?
  fromWard             Ward?               @relation("WardTransfers", fields: [fromWardId], references: [id])
  toWardId             Int?
  toWard               Ward?               @relation("WardTransfers", fields: [toWardId], references: [id])
  fromBedId            Int?
  fromBed              Bed?                @relation(fields: [fromBedId], references: [id])
  toBedId              Int?
  toBed                Bed?                @relation(fields: [toBedId], references: [id])
  transferDate         DateTime            @default(now())
  reason               String?             // Reason for transfer
  notes                String?             // Additional notes
  createdById          Int?                // User who initiated transfer
  createdBy            User?               @relation(fields: [createdById], references: [id])
  approvedById         Int?                // User who approved transfer
  approvedBy           User?               @relation(fields: [approvedById], references: [id])
  auditLogs            AuditLog[]          @relation("TransferAuditLogs")
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

// =========================================
// EMERGENCY
// =========================================

enum EmergencyStatus {
  PENDING
  ACTIVE
  STABILIZED
  TRANSFERRED
  DISCHARGED
  CANCELLED
}



model Emergency {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  patientId             Int
  patient               Patient             @relation(fields: [patientId], references: [id])
  doctorId              Int?                // Link to attending doctor
  doctor                Doctor?             @relation("DoctorEmergencies", fields: [doctorId], references: [id])
  admissionId           Int?                // Link to admission
  admission             Admission?          @relation(fields: [admissionId], references: [id])
  departmentId          Int?                // Link to department (e.g., Emergency Department)
  department            Department?         @relation(fields: [departmentId], references: [id])
  clinicalSettingId     Int?                // Link to clinical setting
  clinicalSetting       ClinicalSetting?    @relation(fields: [clinicalSettingId], references: [id])
  triagePriority        TriagePriority      // Priority level
  triageNotes           String?             // Notes from triage
  triageDate            DateTime?           // Date and time of triage
  status                EmergencyStatus     @default(PENDING)
  incidentDate          DateTime            @default(now()) // Date and time of emergency incident
  presentingComplaints  String?             // Patient's chief complaints
  initialAssessment     String?             // JSON or text for initial assessment details
  treatmentProvided     String?             // JSON or text for treatments provided
  laboratoryId          Int?                // Link to lab tests ordered
  laboratory            Laboratory?         @relation(fields: [laboratoryId], references: [id])
  radiologyId           Int?                // Link to radiology tests ordered
  radiology             Radiology?          @relation(fields: [radiologyId], references: [id])
  pharmacyId            Int?                // Link to prescriptions
  pharmacy              Pharmacy?           @relation(fields: [pharmacyId], references: [id])
  operationTheatreId    Int?                // Link to surgical procedures
  operationTheatre      OperationTheatre?   @relation(fields: [operationTheatreId], references: [id])
  billingId             Int?                // Link to billing for emergency services
  billing               Billing?            @relation(fields: [billingId], references: [id])
  claimId               Int?                // Link to insurance claim
  claim                 Claim?              @relation(fields: [claimId], references: [id])
  wardId                Int?                // Link to ward for transfer
  ward                  Ward?               @relation(fields: [wardId], references: [id])
  bedId                 Int?                // Link to specific bed
  bed                   Bed?                @relation(fields: [bedId], references: [id])
  transferReason        String?             // Reason for transfer (if applicable)
  transferDate          DateTime?           // Date of transfer
  dischargeDate         DateTime?           // Date of discharge
  dischargeNotes        String?             // Notes at discharge
  createdById           Int?                // User who created the emergency record
  createdBy             User?               @relation("EmergencyCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation("EmergencyUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("EmergencyAuditLogs")
  emergencyDocuments    EmergencyDocument[] @relation("EmergencyDocuments")
  emergencyNotifications EmergencyNotification[] @relation("EmergencyNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model EmergencyDocument {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  emergencyId           Int
  emergency             Emergency           @relation("EmergencyDocuments", fields: [emergencyId], references: [id])
  documentType          String              // e.g., "Triage Report", "Consent Form"
  filePath              String              // Path to stored document
  description           String?             // Description of document
  uploadedById          Int?                // User who uploaded document
  uploadedBy            User?               @relation(fields: [uploadedById], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  auditLogs             AuditLog[]          @relation("EmergencyDocumentAuditLogs")
}

model EmergencyNotification {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  emergencyId           Int
  emergency             Emergency           @relation("EmergencyNotifications", fields: [emergencyId], references: [id])
  notificationType      String              // e.g., "SMS", "Email", "App Push"
  status                NotificationStatus  @default(PENDING)
  sentAt                DateTime?
  recipientId           Int?                // User or patient receiving notification
  recipient             User?               @relation(fields: [recipientId], references: [id])
  message               String?             // Notification content
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

// =========================================
// QUEUE MGMT
// =========================================

// queue-mgmt.prisma
enum QueueStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
  SKIPPED
  CANCELLED
}

enum QueuePriority {
  EMERGENCY
  URGENT
  NON_URGENT
}

enum QueueConfigStatus {
  ACTIVE
  INACTIVE
}

model Queue {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  queueNumber         Int                   // Sequential queue number
  status              QueueStatus           @default(WAITING)
  priority            QueuePriority?        // EMERGENCY, URGENT, NON_URGENT
  patientId           Int?                  // Link to patient
  patient             Patient?              @relation(fields: [patientId], references: [id])
  appointmentId       Int?                  @unique // Link to appointment
  appointment         Appointment?          @relation(fields: [appointmentId], references: [id])
  admissionId         Int?                  // Link to admission
  admission           Admission?            @relation(fields: [admissionId], references: [id])
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  doctorId            Int?                  // Link to doctor
  doctor              Doctor?               @relation(fields: [doctorId], references: [id])
  clinicalSettingId   Int?                  // Link to clinical setting
  clinicalSetting     ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  wardId              Int?                  // Link to ward
  ward                Ward?                 @relation(fields: [wardId], references: [id])
  serviceType         String?               // e.g., "Consultation", "Lab Test", "Pharmacy"
  estimatedWaitTime   Int?                  // Estimated wait time in minutes
  calledAt            DateTime?             // Time patient was called
  completedAt         DateTime?             // Time queue entry was completed
  notes               String?               // Additional notes
  createdById         Int?                  // User who created queue entry
  createdBy           User?                 @relation("QueueCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("QueueUpdatedBy", fields: [updatedById], references: [id])
  queueLogs           QueueLog[]            @relation("QueueLogs")
  notifications       QueueNotification[]   @relation("QueueNotifications")
  auditLogs           AuditLog[]            @relation("QueueAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model QueueLog {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  queueId             Int
  queue               Queue                 @relation("QueueLogs", fields: [queueId], references: [id])
  action              String                // e.g., "Added", "Called", "Skipped"
  actionById          Int?                  // User who performed action
  actionBy            User?                 @relation(fields: [actionById], references: [id])
  actionDate          DateTime              @default(now())
  notes               String?               // Notes for the action
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model QueueNotification {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  queueId             Int
  queue               Queue                 @relation("QueueNotifications", fields: [queueId], references: [id])
  notificationType    String                // e.g., "SMS", "Email", "App Push"
  status              NotificationStatus    @default(PENDING)
  sentAt              DateTime?
  recipientId         Int?                  // User or patient receiving notification
  recipient           User?                 @relation(fields: [recipientId], references: [id])
  message             String?               // Notification content
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model QueueConfiguration {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  clinicalSettingId   Int?                  // Link to clinical setting
  clinicalSetting     ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  name                String                // e.g., "OPD Queue Config"
  description         String?               // Configuration description
  maxQueueSize        Int?                  // Maximum queue capacity
  priorityRules       String?               // JSON or text for priority rules
  autoAssignDoctor    Boolean               @default(false) // Auto-assign doctors
  notificationSettings String?               // JSON for notification settings (e.g., SMS, email)
  operatingHours      String?               // JSON or text for queue operating hours
  status              QueueConfigStatus     @default(ACTIVE) // ACTIVE, INACTIVE
  createdById         Int?                  // User who created configuration
  createdBy           User?                 @relation("QueueConfigCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("QueueConfigUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("QueueConfigAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

// =========================================
// CLINICAL
// =========================================

enum ClinicalRecordType {
  CONSULTATION
  PROCEDURE
  DIAGNOSIS
  TREATMENT_PLAN
  OBSERVATION
  PROGRESS_NOTE
  DISCHARGE_SUMMARY
  ALLERGY
  IMMUNIZATION
}

enum ClinicalStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
  PENDING_REVIEW
  ARCHIVED
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  READ
}

model ClinicalRecord {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  patientId             Int
  patient               Patient             @relation(fields: [patientId], references: [id])
  doctorId              Int?                // Link to doctor
  doctor                Doctor?             @relation("DoctorClinicalRecords", fields: [doctorId], references: [id])
  appointmentId         Int?                // Link to appointment
  appointment           Appointment?        @relation(fields: [appointmentId], references: [id])
  admissionId           Int?                // Link to admission
  admission             Admission?          @relation(fields: [admissionId], references: [id])
  medicalRecordId       Int?                // Link to medical record
  medicalRecord         MedicalRecord?      @relation(fields: [medicalRecordId], references: [id])
  clinicalSettingId     Int?                // Link to clinical setting
  clinicalSetting       ClinicalSetting?    @relation(fields: [clinicalSettingId], references: [id])
  departmentId          Int?                // Link to department
  department            Department?         @relation(fields: [departmentId], references: [id])
  type                  ClinicalRecordType
  status                ClinicalStatus      @default(DRAFT)
  diagnosis             String?             // JSON for diagnosis details (ICD-10 codes, descriptions)
  treatmentPlan         String?             // JSON for treatment plan (medications, procedures)
  procedureDetails      String?             // JSON for procedure details (e.g., CPT codes)
  observationNotes      String?             // Observation notes
  vitals                String?             // JSON for vital signs (e.g., {"bp": "120/80", "pulse": 72})
  allergies              String?             // JSON for allergies (e.g., {"drug": "Penicillin", "reaction": "Rash"})
  immunizationHistory    String?             // JSON for immunization history
  laboratoryId          Int?                // Link to lab tests ordered
  laboratory            Laboratory?         @relation(fields: [laboratoryId], references: [id])
  radiologyId           Int?                // Link to radiology tests ordered
  radiology             Radiology?          @relation(fields: [radiologyId], references: [id])
  pharmacyId            Int?                // Link to prescriptions
  pharmacy              Pharmacy?           @relation(fields: [pharmacyId], references: [id])
  operationTheatreId    Int?                // Link to surgical procedures
  operationTheatre      OperationTheatre?   @relation(fields: [operationTheatreId], references: [id])
  nursingId             Int?                // Link to nursing care provided
  nursing               Nursing?            @relation(fields: [nursingId], references: [id])
  billingId             Int?                // Link to billing for clinical services
  billing               Billing?            @relation(fields: [billingId], references: [id])
  claimId               Int?                // Link to insurance claim
  claim                 Claim?              @relation(fields: [claimId], references: [id])
  encounterDate         DateTime?           // Date of clinical encounter
  location              String?             // Location of encounter (e.g., "Room 101")
  clinicalNotes         String?             // General clinical notes
  createdById           Int?                // User who created the record
  createdBy             User?               @relation("ClinicalRecordCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation("ClinicalRecordUpdatedBy", fields: [updatedById], references: [id])
  reviewedById          Int?                // User who reviewed the record
  reviewedBy            User?               @relation("ClinicalRecordReviewedBy", fields: [reviewedById], references: [id])
  auditLogs             AuditLog[]          @relation("ClinicalRecordAuditLogs")
  clinicalDocuments     ClinicalDocument[]  @relation("ClinicalRecordDocuments")
  clinicalNotifications ClinicalNotification[] @relation("ClinicalRecordNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model ClinicalDocument {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  clinicalRecordId      Int
  clinicalRecord        ClinicalRecord      @relation("ClinicalRecordDocuments", fields: [clinicalRecordId], references: [id])
  documentType          String              // e.g., "Lab Report", "Imaging Result", "Consent Form"
  filePath              String              // Path to stored document
  description           String?             // Description of document
  uploadedById          Int?                // User who uploaded document
  uploadedBy            User?               @relation(fields: [uploadedById], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  auditLogs             AuditLog[]          @relation("ClinicalDocumentAuditLogs")
}

model ClinicalNotification {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  clinicalRecordId      Int
  clinicalRecord        ClinicalRecord      @relation("ClinicalRecordNotifications", fields: [clinicalRecordId], references: [id])
  notificationType      String              // e.g., "SMS", "Email", "App Push"
  status                NotificationStatus  @default(PENDING)
  sentAt                DateTime?
  recipientId           Int?                // User or patient receiving notification
  recipient             User?               @relation(fields: [recipientId], references: [id])
  message               String?             // Notification content
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

// =========================================
// LABORATORY
// =========================================

enum LabTestStatus {
  ORDERED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

enum LabTestType {
  BLOOD
  URINE
  MICROBIOLOGY
  PATHOLOGY
  BIOCHEMISTRY
  IMMUNOLOGY
  OTHER
}



model Laboratory {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  testCode              String              @unique // e.g., "LAB-001"
  patientId             Int
  patient               Patient             @relation(fields: [patientId], references: [id])
  doctorId              Int?                // Link to ordering doctor
  doctor                Doctor?             @relation("LaboratoryOrders", fields: [doctorId], references: [id])
  appointmentId         Int?                // Link to appointment
  appointment           Appointment?        @relation(fields: [appointmentId], references: [id])
  admissionId           Int?                // Link to admission
  admission             Admission?          @relation(fields: [admissionId], references: [id])
  clinicalRecordId      Int?                // Link to clinical record
  clinicalRecord        ClinicalRecord?     @relation(fields: [clinicalRecordId], references: [id])
  departmentId          Int?                // Link to department
  department            Department?         @relation(fields: [departmentId], references: [id])
  clinicalSettingId     Int?                // Link to clinical setting
  clinicalSetting       ClinicalSetting?    @relation(fields: [clinicalSettingId], references: [id])
  testType              LabTestType         // Type of lab test
  status                LabTestStatus       @default(ORDERED)
  testName              String              // Name of the test (e.g., "Complete Blood Count")
  description           String?             // Detailed description of test
  orderDate             DateTime            @default(now()) // Date test was ordered
  sampleCollectionDate  DateTime?           // Date sample was collected
  resultDate            DateTime?           // Date results were available
  results               String?             // JSON or text for test results
  normalRange           String?             // JSON or text for reference range (e.g., {"hb": "12-16 g/dL"})
  billingId             Int?                // Link to billing for lab test
  billing               Billing?            @relation(fields: [billingId], references: [id])
  claimId               Int?                // Link to insurance claim
  claim                 Claim?              @relation(fields: [claimId], references: [id])
  sampleId              String?             // Unique sample identifier (e.g., barcode)
  performedById         Int?                // User or technician who performed the test
  performedBy           User?               @relation("PerformedBy", fields: [performedById], references: [id])
  reviewedById          Int?                // User who reviewed the results
  reviewedBy            User?               @relation("ReviewedBy", fields: [reviewedById], references: [id])
  notes                 String?             // Additional notes for the test
  createdById           Int?                // User who created the lab record
  createdBy             User?               @relation("LaboratoryCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation("LaboratoryUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("LaboratoryAuditLogs")
  labDocuments          LabDocument[]       @relation("LaboratoryDocuments")
  labNotifications      LabNotification[]   @relation("LaboratoryNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model LabDocument {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  laboratoryId          Int
  laboratory            Laboratory          @relation("LaboratoryDocuments", fields: [laboratoryId], references: [id])
  documentType          String              // e.g., "Lab Report", "Sample Image"
  filePath              String              // Path to stored document
  description           String?             // Description of document
  uploadedById          Int?                // User who uploaded document
  uploadedBy            User?               @relation(fields: [uploadedById], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  auditLogs             AuditLog[]          @relation("LabDocumentAuditLogs")
}

model LabNotification {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  laboratoryId          Int
  laboratory            Laboratory          @relation("LaboratoryNotifications", fields: [laboratoryId], references: [id])
  notificationType      String              // e.g., "SMS", "Email", "App Push"
  status                NotificationStatus  @default(PENDING)
  sentAt                DateTime?
  recipientId           Int?                // User or patient receiving notification
  recipient             User?               @relation(fields: [recipientId], references: [id])
  message               String?             // Notification content
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

// =========================================
// RADIOLOGY
// =========================================

// radiology.prisma
enum RadiologyTestStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  PENDING_REPORT
  REPORTED
}

enum RadiologyTestType {
  XRAY
  CT
  MRI
  ULTRASOUND
  MAMMOGRAPHY
  FLUOROSCOPY
  NUCLEAR_MEDICINE
  PET_SCAN
}

enum RadiologyEquipmentStatus {
  AVAILABLE
  IN_USE
  UNDER_MAINTENANCE
  OUT_OF_SERVICE
}

model Radiology {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  patientId           Int?                  // Link to patient
  patient             Patient?              @relation(fields: [patientId], references: [id])
  appointmentId       Int?                  // Link to appointment
  appointment         Appointment?          @relation(fields: [appointmentId], references: [id])
  emergencyId         Int?                  // Link to emergency
  emergency           Emergency?            @relation(fields: [emergencyId], references: [id])
  invoiceId           Int?                  // Link to invoice
  invoice             Invoice?              @relation(fields: [invoiceId], references: [id])
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  status              RadiologyTestStatus   @default(SCHEDULED) // Reusing existing enum
  createdById         Int?                  // User who created the record
  createdBy           User?                 @relation("RadiologyCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("RadiologyUpdatedBy", fields: [updatedById], references: [id])
  radiologyTests      RadiologyTest[]       // Link to specific tests
  auditLogs           AuditLog[]            @relation("RadiologyAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model RadiologyTest {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  testNumber          String                @unique
  patientId           Int
  patient             Patient               @relation(fields: [patientId], references: [id])
  radiologyId         Int?                  // Link to parent Radiology record
  radiology           Radiology?            @relation(fields: [radiologyId], references: [id])
  doctorId            Int?
  doctor              Doctor?               @relation("RadiologyDoctor", fields: [doctorId], references: [id])
  radiologistId       Int?
  radiologist         User?                 @relation("Radiologist", fields: [radiologistId], references: [id])
  appointmentId       Int?
  appointment         Appointment?          @relation(fields: [appointmentId], references: [id])
  admissionId         Int?
  admission           Admission?            @relation(fields: [admissionId], references: [id])
  clinicalRecordId    Int?
  clinicalRecord      ClinicalRecord?       @relation(fields: [clinicalRecordId], references: [id])
  medicalRecordId     Int?
  medicalRecord       MedicalRecord?        @relation(fields: [medicalRecordId], references: [id])
  departmentId        Int?
  department          Department?           @relation(fields: [departmentId], references: [id])
  clinicalSettingId   Int?
  clinicalSetting     ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  type                RadiologyTestType
  status              RadiologyTestStatus   @default(SCHEDULED)
  testDate            DateTime              @default(now())
  scheduledDate       DateTime?
  completedDate       DateTime?
  reportDate          DateTime?
  equipmentId         Int?
  equipment           RadiologyEquipment?   @relation(fields: [equipmentId], references: [id])
  billingId           Int?
  billing             Billing?              @relation(fields: [billingId], references: [id])
  claimId             Int?
  claim               Claim?                @relation(fields: [claimId], references: [id])
  nhifClaimId         Int?
  nhifClaim           NhifClaim?            @relation(fields: [nhifClaimId], references: [id])
  testCode            String?
  indications         String?
  findings            String?
  report              String?
  images              String?
  contrastUsed        Boolean               @default(false)
  contrastType        String?
  radiationDose       Float?
  notes               String?
  priority            String?
  createdById         Int?
  createdBy           User?                 @relation("RadiologyTestCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?
  updatedBy           User?                 @relation("RadiologyTestUpdatedBy", fields: [updatedById], references: [id])
  reportedById        Int?
  reportedBy          User?                 @relation("RadiologyTestReportedBy", fields: [reportedById], references: [id])
  auditLogs           AuditLog[]            @relation("RadiologyTestAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model RadiologyEquipment {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  name                String
  equipmentId         String                @unique
  type                RadiologyTestType
  status              RadiologyEquipmentStatus @default(AVAILABLE)
  departmentId        Int?
  department          Department?           @relation(fields: [departmentId], references: [id])
  clinicalSettingId   Int?
  clinicalSetting     ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  location            String?
  manufacturer        String?
  model               String?
  serialNumber        String?               @unique
  purchaseDate        DateTime?
  warrantyExpires     DateTime?
  lastMaintenance     DateTime?
  maintenanceSchedule String?
  calibrationDate     DateTime?
  calibrationDetails  String?
  radiationSafetyCheck DateTime?
  cost                Float?
  fixedAssetId        Int?
  fixedAsset          FixedAsset?           @relation(fields: [fixedAssetId], references: [id])
  procurementId       Int?
  procurement         Procurement?          @relation(fields: [procurementId], references: [id])
  radiologyTests      RadiologyTest[]       // Tests performed using this equipment
  notes               String?
  documents           String?
  createdById         Int?
  createdBy           User?                 @relation("EquipmentCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?
  updatedBy           User?                 @relation("EquipmentUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("RadiologyEquipmentAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

// =========================================
// OPERATION THEATRE
// =========================================

// operation-theatre.prisma
enum OperationTheatreStatus {
  AVAILABLE
  IN_USE
  UNDER_MAINTENANCE
  RESERVED
  OUT_OF_SERVICE
}

enum ProcedureStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum ProcedureType {
  ELECTIVE
  EMERGENCY
  MINOR
  MAJOR
  DIAGNOSTIC
}

model OperationTheatre {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  name                String                // e.g., "OT-1 Main Theatre"
  theatreNumber       String                @unique // e.g., "OT-001"
  status              OperationTheatreStatus @default(AVAILABLE)
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  clinicalSettingId   Int?                  // Link to clinical setting
  clinicalSetting     ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  location            String?               // e.g., "Building B, Floor 3"
  capacity            Int?                  // Max capacity (e.g., number of patients or staff)
  equipmentList       String?               // JSON or text for equipment (e.g., {"ventilator": 1, "monitor": 2})
  cssdInstrumentId    Int?                  // Link to CSSD instruments
  cssdInstrument      CSSDInstrument?       @relation(fields: [cssdInstrumentId], references: [id])
  procedures          SurgicalProcedure[]   // Procedures scheduled in this theatre
  createdById         Int?                  // User who created the theatre
  createdBy           User?                 @relation("TheatreCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("TheatreUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("OperationTheatreAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model SurgicalProcedure {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  patientId           Int                   // Link to patient
  patient             Patient               @relation(fields: [patientId], references: [id])
  doctorId            Int?                  // Link to lead surgeon
  doctor              Doctor?               @relation("Surgeon", fields: [doctorId], references: [id])
  operationTheatreId  Int                   // Link to operation theatre
  operationTheatre    OperationTheatre      @relation(fields: [operationTheatreId], references: [id])
  appointmentId       Int?                  // Link to appointment
  appointment         Appointment?          @relation(fields: [appointmentId], references: [id])
  admissionId         Int?                  // Link to admission
  admission           Admission?            @relation(fields: [admissionId], references: [id])
  clinicalRecordId    Int?                  // Link to clinical record
  clinicalRecord      ClinicalRecord?       @relation(fields: [clinicalRecordId], references: [id])
  medicalRecordId     Int?                  // Link to medical record
  medicalRecord       MedicalRecord?        @relation(fields: [medicalRecordId], references: [id])
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  clinicalSettingId   Int?                  // Link to clinical setting
  clinicalSetting     ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  type                ProcedureType         // ELECTIVE, EMERGENCY, etc.
  status              ProcedureStatus       @default(SCHEDULED)
  procedureCode       String?               // e.g., ICD-10-PCS code
  description         String?               // Procedure description
  startTime           DateTime              // Scheduled start time
  endTime             DateTime?             // Actual or estimated end time
  duration            Int?                  // Duration in minutes
  anesthesiaType      String?               // e.g., "General", "Local"
  preOpNotes          String?               // Pre-operative notes
  postOpNotes         String?               // Post-operative notes
  complications       String?               // JSON or text for complications
  cssdRequisitionId   Int?                  // Link to CSSD requisition for instruments
  cssdRequisition     CSSDRequisition?      @relation(fields: [cssdRequisitionId], references: [id])
  pharmacyId          Int?                  // Link to pharmacy for medications
  pharmacy            Pharmacy?             @relation(fields: [pharmacyId], references: [id])
  nursingId           Int?                  // Link to nursing care during procedure
  nursing             Nursing?              @relation(fields: [nursingId], references: [id])
  billingId           Int?                  // Link to billing for procedure charges
  billing             Billing?              @relation(fields: [billingId], references: [id])
  claimId             Int?                  // Link to insurance claim
  claim               Claim?                @relation(fields: [claimId], references: [id])
  nhifClaimId         Int?                  // Link to NHIF claim
  nhifClaim           NhifClaim?            @relation(fields: [nhifClaimId], references: [id])
  staffAssignments    SurgicalStaff[]       // Staff assigned to procedure
  documents           String?               // JSON or file paths for attached documents
  createdById         Int?                  // User who created the procedure
  createdBy           User?                 @relation("ProcedureCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("ProcedureUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("SurgicalProcedureAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model SurgicalStaff {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  procedureId         Int                   // Link to surgical procedure
  procedure           SurgicalProcedure     @relation(fields: [procedureId], references: [id])
  staffId             Int                   // Link to staff (User)
  staff               User                  @relation("SurgicalStaff", fields: [staffId], references: [id])
  role                String                // e.g., "Surgeon", "Anesthetist", "Nurse"
  notes               String?               // Notes about staff role
  createdById         Int?                  // User who assigned staff
  createdBy           User?                 @relation("StaffAssignmentCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("StaffAssignmentUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("SurgicalStaffAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

// =========================================
// CLINICAL SETTINGS
// =========================================

enum ClinicalSettingType {
  GENERAL
  SPECIALTY
  EMERGENCY
  OUTPATIENT
  INPATIENT
  ICU
  PEDIATRIC
  MATERNITY
}

enum ConfigurationStatus {
  ACTIVE
  INACTIVE
  DRAFT
  ARCHIVED
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
  UNDER_CLEANING
}

model ClinicalSetting {
  id                    Int                   @id @default(autoincrement())
  uuid                  String                @unique @default(uuid())
  name                  String                // e.g., "Cardiology Clinic Settings"
  code                  String?               @unique // e.g., "CS-CARDIO-001"
  type                  ClinicalSettingType
  status                ConfigurationStatus   @default(DRAFT)
  departmentId          Int?                  // Link to department
  department            Department?           @relation(fields: [departmentId], references: [id])
  protocols             String?               // JSON for clinical protocols (e.g., treatment guidelines)
  defaultRoomId         Int?                  // Default room for this setting
  defaultRoom           Room?                 @relation(fields: [defaultRoomId], references: [id])
  equipmentList         String?               // JSON for required equipment
  staffRoles            String?               // JSON for required staff roles (e.g., ["DOCTOR", "NURSE"])
  appointmentDuration   Int?                  // Default duration for appointments (in minutes)
  maxPatientsPerSlot    Int?                  // Max patients per appointment slot
  operatingHours        String?               // JSON for operating hours (e.g., {"mon": "08:00-17:00"})
  billingRules          String?               // JSON for billing rules specific to this setting
  laboratoryId          Int?                  // Link to default laboratory
  laboratory            Laboratory?           @relation(fields: [laboratoryId], references: [id])
  radiologyId           Int?                  // Link to default radiology
  radiology             Radiology?            @relation(fields: [radiologyId], references: [id])
  pharmacyId            Int?                  // Link to default pharmacy
  pharmacy              Pharmacy?             @relation(fields: [pharmacyId], references: [id])
  operationTheatreId    Int?                  // Link to default operation theatre
  operationTheatre      OperationTheatre?     @relation(fields: [operationTheatreId], references: [id])
  nursingId             Int?                  // Link to nursing protocols
  nursing               Nursing?              @relation(fields: [nursingId], references: [id])
  cssdId                Int?                  // Link to CSSD for sterilization protocols
  cssd                  Cssd?                 @relation(fields: [cssdId], references: [id])
  wardId                Int?                  // Link to ward for inpatient settings
  ward                  Ward?                 @relation(fields: [wardId], references: [id])
  triageProtocols       String?               // JSON for triage protocols
  emergencyProtocols    String?               // JSON for emergency handling protocols
  patientFlowRules      String?               // JSON for patient flow and queue management rules
  documentationTemplates String?              // JSON for default documentation templates
  createdById           Int?                  // User who created the setting
  createdBy             User?                 @relation("ClinicalSettingCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                  // User who last updated
  updatedBy             User?                 @relation("ClinicalSettingUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]            @relation("ClinicalSettingAuditLogs")
  clinicalSettingDocuments ClinicalSettingDocument[] @relation("ClinicalSettingDocuments")
  clinicalSettingNotifications ClinicalSettingNotification[] @relation("ClinicalSettingNotifications")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model Room {
  id                    Int                   @id @default(autoincrement())
  uuid                  String                @unique @default(uuid())
  roomNumber            String                @unique // e.g., "R-101"
  name                  String?               // e.g., "Consultation Room 1"
  departmentId          Int?                  // Link to department
  department            Department?           @relation(fields: [departmentId], references: [id])
  clinicalSettingId     Int?                  // Link to clinical setting
  clinicalSetting       ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  status                RoomStatus            @default(AVAILABLE)
  capacity              Int?                  // Max capacity (e.g., number of patients)
  roomType              String?               // e.g., "Consultation", "Procedure", "Examination"
  equipment             String?               // JSON for equipment in room
  location              String?               // e.g., "Building A, Floor 2"
  lastCleaned           DateTime?             // Last cleaning timestamp
  maintenanceNotes      String?               // Notes for maintenance issues
  createdById           Int?                  // User who created room
  createdBy             User?                 @relation(fields: [createdById], references: [id])
  updatedById           Int?                  // User who last updated
  updatedBy             User?                 @relation(fields: [updatedById], references: [id])
  auditLogs             AuditLog[]            @relation("RoomAuditLogs")
  roomSchedules         RoomSchedule[]        @relation("RoomSchedules")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model RoomSchedule {
  id                    Int                   @id @default(autoincrement())
  uuid                  String                @unique @default(uuid())
  roomId                Int
  room                  Room                @relation("RoomSchedules", fields: [roomId], references: [id])
  startTime             DateTime
  endTime               DateTime
  appointmentId         Int?                  // Link to appointment
  appointment           Appointment?          @relation(fields: [appointmentId], references: [id])
  status                String                @default("AVAILABLE") // AVAILABLE, BOOKED, MAINTENANCE
  notes                 String?               // Additional notes for schedule
  createdById           Int?                  // User who created schedule
  createdBy             User?                 @relation(fields: [createdById], references: [id])
  updatedById           Int?                  // User who last updated
  updatedBy             User?                 @relation(fields: [updatedById], references: [id])
  auditLogs             AuditLog[]            @relation("RoomScheduleAuditLogs")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model ClinicalSettingDocument {
  id                    Int                   @id @default(autoincrement())
  uuid                  String                @unique @default(uuid())
  clinicalSettingId     Int
  clinicalSetting       ClinicalSetting       @relation("ClinicalSettingDocuments", fields: [clinicalSettingId], references: [id])
  documentType          String               // e.g., "Protocol Document", "Guideline"
  filePath              String               // Path to stored document
  description           String?              // Description of document
  uploadedById          Int?                 // User who uploaded document
  uploadedBy            User?                @relation(fields: [uploadedById], references: [id])
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  auditLogs             AuditLog[]           @relation("ClinicalSettingDocumentAuditLogs")
}

model ClinicalSettingNotification {
  id                    Int                   @id @default(autoincrement())
  uuid                  String                @unique @default(uuid())
  clinicalSettingId     Int
  clinicalSetting       ClinicalSetting       @relation("ClinicalSettingNotifications", fields: [clinicalSettingId], references: [id])
  notificationType      String               // e.g., "SMS", "Email", "App Push"
  status                String               @default("PENDING") // PENDING, SENT, FAILED, READ
  sentAt                DateTime?
  recipientId           Int?                 // User receiving notification
  recipient             User?                @relation(fields: [recipientId], references: [id])
  message               String?              // Notification content
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
}

// =========================================
// CSSD
// =========================================

// cssd.prisma
enum CSSDInstrumentStatus {
  AVAILABLE
  IN_USE
  UNDER_MAINTENANCE
  STERILIZATION_IN_PROGRESS
  OUT_OF_SERVICE
  RESERVED
}

enum CSSDSterilizationMethod {
  STEAM
  ETHYLENE_OXIDE
  PLASMA
  DRY_HEAT
  CHEMICAL
}

enum CSSDRecordStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum CSSDRequisitionStatus {
  PENDING
  APPROVED
  DISPATCHED
  REJECTED
  RETURNED
}

enum CSSDStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

model Cssd {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  departmentId        Int?                  // Link to department managing CSSD
  department          Department?           @relation(fields: [departmentId], references: [id])
  clinicalSettingId   Int?                  // Link to clinical setting
  clinicalSetting     ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  name                String                // e.g., "Main CSSD Unit"
  status              CSSDStatus            @default(ACTIVE) // Status of CSSD service
  location            String?               // Physical location (e.g., "Building A, Floor 1")
  capacity            Int?                  // Daily sterilization capacity
  operatingHours      String?               // JSON or text for operating hours
  instruments         CSSDInstrument[]      // Instruments managed by this CSSD
  records             CSSDRecord[]          // Sterilization records for this CSSD
  requisitions        CSSDRequisition[]     @relation("CssdRequisitions")
  maintenanceRecords  CSSDMaintenance[]     // Maintenance records for this CSSD
  createdById         Int?                  // User who created the record
  createdBy           User?                 @relation("CssdCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("CssdUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("CssdAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model CSSDInstrument {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  cssdId              Int?                  // Link to CSSD service
  cssd                Cssd?                 @relation(fields: [cssdId], references: [id])
  name                String                // e.g., "Surgical Scalpel"
  serialNumber        String                @unique // Unique identifier for tracking
  type                String?               // e.g., "Surgical", "Diagnostic"
  status              CSSDInstrumentStatus  @default(AVAILABLE)
  lastSterilized      DateTime?             // Last sterilization date
  lastMaintenance     DateTime?             // Last maintenance date
  location            String?               // Current location (e.g., "CSSD Storage", "OT-1")
  stockQuantity       Int                   @default(1) // Current stock
  minStockThreshold   Int                   @default(1) // Minimum stock before alert
  maxStockThreshold   Int?                  // Maximum stock capacity
  manufacturer        String?               // Manufacturer name
  model               String?               // Model number
  purchaseDate        DateTime?             // Date of purchase
  warrantyExpires     DateTime?             // Warranty expiration date
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  operationTheatreId  Int?                  // Link to operation theatre
  operationTheatre    OperationTheatre?     @relation(fields: [operationTheatreId], references: [id])
  clinicalSettingId   Int?                  // Link to clinical setting
  clinicalSetting     ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  procurementId       Int?                  // Link to procurement for acquisition
  procurement         Procurement?          @relation(fields: [procurementId], references: [id])
  fixedAssetId        Int?                  // Link to fixed assets for inventory
  fixedAsset          FixedAsset?           @relation(fields: [fixedAssetId], references: [id])
  cssdRecords         CSSDRecord[]          // Sterilization records
  requisitions        CSSDRequisition[]     @relation("RequisitionInstrument")
  logs                CSSDLog[]             @relation("InstrumentLogs")
  maintenanceRecords  CSSDMaintenance[]     // Maintenance history
  createdById         Int?                  // User who added instrument
  createdBy           User?                 @relation("InstrumentCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("InstrumentUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("CSSDInstrumentAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model CSSDRecord {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  cssdId              Int?                  // Link to CSSD service
  cssd                Cssd?                 @relation(fields: [cssdId], references: [id])
  instrumentId        Int                   // Link to instrument
  instrument          CSSDInstrument        @relation(fields: [instrumentId], references: [id])
  sterilizationDate   DateTime?             // Date of sterilization
  sterilizationMethod CSSDSterilizationMethod? // Method used
  cycleNumber         String?               // Sterilization cycle identifier
  status              CSSDRecordStatus      @default(PENDING)
  qualityCheck        String?               // Quality check results (e.g., "Pass", "Fail")
  qualityCheckDate    DateTime?             // Date of quality check
  sterilizerId        String?               // ID of sterilizer machine
  batchNumber         String?               // Batch number for sterilization
  expiryDate          DateTime?             // Expiry date of sterilization
  notes               String?               // Additional notes
  operationTheatreId  Int?                  // Link to operation theatre
  operationTheatre    OperationTheatre?     @relation(fields: [operationTheatreId], references: [id])
  clinicalSettingId   Int?                  // Link to clinical setting
  clinicalSetting     ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  createdById         Int?                  // User who created record
  createdBy           User?                 @relation("RecordCreatedBy", fields: [createdById], references: [id])
  qualityCheckedById  Int?                  // User who performed quality check
  qualityCheckedBy    User?                 @relation("RecordQualityCheckedBy", fields: [qualityCheckedById], references: [id])
  logs                CSSDLog[]             @relation("RecordLogs")
  auditLogs           AuditLog[]            @relation("CSSDRecordAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model CSSDRequisition {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  cssdId              Int?                  // Link to CSSD service
  cssd                Cssd?                 @relation("CssdRequisitions", fields: [cssdId], references: [id])
  instrumentId        Int                   // Link to instrument
  instrument          CSSDInstrument        @relation("RequisitionInstrument", fields: [instrumentId], references: [id])
  departmentId        Int?                  // Link to requesting department
  department          Department?           @relation(fields: [departmentId], references: [id])
  operationTheatreId  Int?                  // Link to operation theatre
  operationTheatre    OperationTheatre?     @relation(fields: [operationTheatreId], references: [id])
  requestedById       Int                   // User who requested
  requestedBy         User                  @relation("RequisitionRequestedBy", fields: [requestedById], references: [id])
  approvedById        Int?                  // User who approved
  approvedBy          User?                 @relation("RequisitionApprovedBy", fields: [approvedById], references: [id])
  quantity            Int                   // Requested quantity
  requestDate         DateTime              @default(now())
  dispatchDate        DateTime?             // Date instruments were dispatched
  returnDate          DateTime?             // Date instruments were returned
  status              CSSDRequisitionStatus @default(PENDING)
  notes               String?               // Additional notes
  clinicalSettingId   Int?                  // Link to clinical setting
  clinicalSetting     ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  procurementId       Int?                  // Link to procurement for restocking
  procurement         Procurement?          @relation(fields: [procurementId], references: [id])
  logs                CSSDLog[]             @relation("RequisitionLogs")
  auditLogs           AuditLog[]            @relation("CSSDRequisitionAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model CSSDMaintenance {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  cssdId              Int?                  // Link to CSSD service
  cssd                Cssd?                 @relation(fields: [cssdId], references: [id])
  instrumentId        Int                   // Link to instrument
  instrument          CSSDInstrument        @relation(fields: [instrumentId], references: [id])
  maintenanceDate     DateTime              @default(now())
  maintenanceType     String?               // e.g., "Routine", "Repair"
  description         String?               // Details of maintenance
  performedById       Int?                  // User or technician who performed maintenance
  performedBy         User?                 @relation(fields: [performedById], references: [id])
  cost                Float?                // Cost of maintenance
  status              String                @default(PENDING) // PENDING, COMPLETED, FAILED
  notes               String?               // Additional notes
  procurementId       Int?                  // Link to procurement for parts
  procurement         Procurement?          @relation(fields: [procurementId], references: [id])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model CSSDLog {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  cssdId              Int?                  // Link to CSSD service
  cssd                Cssd?                 @relation(fields: [cssdId], references: [id])
  instrumentId        Int?                  // Link to instrument
  instrument          CSSDInstrument?       @relation("InstrumentLogs", fields: [instrumentId], references: [id])
  recordId            Int?                  // Link to sterilization record
  record              CSSDRecord?           @relation("RecordLogs", fields: [recordId], references: [id])
  requisitionId       Int?                  // Link to requisition
  requisition         CSSDRequisition?      @relation("RequisitionLogs", fields: [requisitionId], references: [id])
  maintenanceId       Int?                  // Link to maintenance record
  maintenance         CSSDMaintenance?      @relation(fields: [maintenanceId], references: [id])
  userId              Int                   // User who performed action
  user                User                  @relation("LoggedBy", fields: [userId], references: [id])
  action              String                // e.g., "Sterilized", "Requested", "Maintained"
  details             String?               // Detailed description of action
  createdAt           DateTime              @default(now())
}

// =========================================
// NURSING
// =========================================

// nursing.prisma
enum NursingCareType {
  ROUTINE
  CRITICAL
  POST_OPERATIVE
  MATERNITY
  PEDIATRIC
  GERIATRIC
}

enum NursingCareStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum NursingTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  MISSED
}

enum NursingStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

model Nursing {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  patientId           Int?                  // Link to patient
  patient             Patient?              @relation(fields: [patientId], references: [id])
  doctorId            Int?                  // Link to doctor
  doctor              Doctor?               @relation("DoctorNursingRecords", fields: [doctorId], references: [id])
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  clinicalRecordId    Int?                  // Link to clinical record
  clinicalRecord      ClinicalRecord?       @relation(fields: [clinicalRecordId], references: [id])
  admissionId         Int?                  // Link to admission
  admission           Admission?            @relation(fields: [admissionId], references: [id])
  wardId              Int?                  // Link to ward
  ward                Ward?                 @relation(fields: [wardId], references: [id])
  clinicalSettingId   Int?                  // Link to clinical setting
  clinicalSetting     ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  status              NursingStatus         @default(PENDING) // Status of nursing service
  startDate           DateTime              @default(now())   // Start date of nursing service
  endDate             DateTime?             // End date of nursing service
  nursingCareId       Int?                  // Link to specific nursing care
  nursingCare         NursingCare?          @relation(fields: [nursingCareId], references: [id])
  billingId           Int?                  // Link to billing for nursing services
  billing             Billing?              @relation(fields: [billingId], references: [id])
  notes               String?               // General notes
  createdById         Int?                  // User who created the record
  createdBy           User?                 @relation("NursingCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("NursingUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("NursingAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model NursingCare {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  patientId           Int                   // Link to patient
  patient             Patient               @relation(fields: [patientId], references: [id])
  nurseId             Int?                  // Link to nurse (User)
  nurse               User?                 @relation("NurseAssigned", fields: [nurseId], references: [id])
  admissionId         Int?                  // Link to admission
  admission           Admission?            @relation(fields: [admissionId], references: [id])
  clinicalRecordId    Int?                  // Link to clinical record
  clinicalRecord      ClinicalRecord?       @relation(fields: [clinicalRecordId], references: [id])
  medicalRecordId     Int?                  // Link to medical record
  medicalRecord       MedicalRecord?        @relation(fields: [medicalRecordId], references: [id])
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  wardId              Int?                  // Link to ward
  ward                Ward?                 @relation(fields: [wardId], references: [id])
  clinicalSettingId   Int?                  // Link to clinical setting
  clinicalSetting     ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  type                NursingCareType       // Type of nursing care
  status              NursingCareStatus     @default(PENDING)
  carePlan            String?               // JSON or text for care plan details
  vitals              String?               // JSON or text for vital signs (e.g., {"bp": "120/80", "pulse": 72})
  medicationsAdministered String?           // JSON or text for medications given
  nursingNotes        String?               // Ongoing nursing notes
  startDate           DateTime              @default(now())
  endDate             DateTime?             // End date of care
  shiftId             Int?                  // Link to nurse shift
  shift               NursingShift?         @relation(fields: [shiftId], references: [id])
  prescriptionId      Int?                  // Link to prescription
  prescription        Prescription?         @relation(fields: [prescriptionId], references: [id])
  pharmacyId          Int?                  // Link to pharmacy for medication administration
  pharmacy            Pharmacy?             @relation(fields: [pharmacyId], references: [id])
  billingId           Int?                  // Link to billing for nursing services
  billing             Billing?              @relation(fields: [billingId], references: [id])
  nursing             Nursing[]             @relation
  tasks               NursingTask[]         // Nursing tasks associated with this care
  documents           String?               // JSON or file paths for attached documents
  createdById         Int?                  // User who created the record
  createdBy           User?                 @relation("NursingCareCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("NursingCareUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("NursingCareAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model NursingTask {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  nursingCareId       Int                   // Link to nursing care
  nursingCare         NursingCare           @relation(fields: [nursingCareId], references: [id])
  nurseId             Int?                  // Link to assigned nurse
  nurse               User?                 @relation("TaskAssignedNurse", fields: [nurseId], references: [id])
  taskType            String                // e.g., "Medication Administration", "Wound Care"
  description         String?               // Task details
  status              NursingTaskStatus     @default(PENDING)
  scheduledTime       DateTime?             // Scheduled time for task
  completedTime       DateTime?             // Time task was completed
  priority            String?               // e.g., "HIGH", "MEDIUM", "LOW"
  notes               String?               // Additional notes
  prescriptionId      Int?                  // Link to prescription for medication tasks
  prescription        Prescription?         @relation(fields: [prescriptionId], references: [id])
  shiftId             Int?                  // Link to nurse shift
  shift               NursingShift?         @relation(fields: [shiftId], references: [id])
  createdById         Int?                  // User who created the task
  createdBy           User?                 @relation("TaskCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("TaskUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("NursingTaskAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model NursingShift {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  nurseId             Int?                  // Link to nurse
  nurse               User?                 @relation("ShiftNurse", fields: [nurseId], references: [id])
  wardId              Int?                  // Link to ward
  ward                Ward?                 @relation(fields: [wardId], references: [id])
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  startTime           DateTime              // Shift start time
  endTime             DateTime              // Shift end time
  status              String                @default("SCHEDULED") // SCHEDULED, IN_PROGRESS, COMPLETED
  notes               String?               // Shift notes
  nursingCares        NursingCare[]         // Nursing care assignments during shift
  nursingTasks        NursingTask[]         // Tasks assigned during shift
  createdById         Int?                  // User who created the shift
  createdBy           User?                 @relation("ShiftCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("ShiftUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("NursingShiftAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

// =========================================
// MATERNITY
// =========================================

enum MaternityStatus {
  ACTIVE
  DISCHARGED
  TRANSFERRED
  CANCELLED
  PENDING
}

enum DeliveryType {
  NORMAL
  CESAREAN
  ASSISTED
}



model Maternity {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  patientId             Int
  patient               Patient             @relation(fields: [patientId], references: [id])
  doctorId              Int?                // Link to attending doctor
  doctor                Doctor?             @relation("DoctorMaternityRecords", fields: [doctorId], references: [id])
  admissionId           Int?                // Link to admission
  admission             Admission?          @relation(fields: [admissionId], references: [id])
  departmentId          Int?                // Link to maternity department
  department            Department?         @relation(fields: [departmentId], references: [id])
  clinicalSettingId     Int?                // Link to clinical setting
  clinicalSetting       ClinicalSetting?    @relation(fields: [clinicalSettingId], references: [id])
  status                MaternityStatus     @default(PENDING)
  expectedDeliveryDate  DateTime?           // Estimated delivery date
  deliveryDate          DateTime?           // Actual delivery date
  deliveryType          DeliveryType?       // Type of delivery
  gestationWeeks        Int?                // Gestational age in weeks
  prenatalCarePlan      String?             // JSON or text for prenatal care plan
  complications         String?             // JSON or text for complications (e.g., {"type": "Preeclampsia"})
  babyDetails           String?             // JSON for baby details (e.g., {"gender": "Male", "weight": 3.2})
  clinicalRecordId      Int?                // Link to clinical record
  clinicalRecord        ClinicalRecord?     @relation(fields: [clinicalRecordId], references: [id])
  billingId             Int?                // Link to billing for maternity services
  billing               Billing?            @relation(fields: [billingId], references: [id])
  claimId               Int?                // Link to insurance claim
  claim                 Claim?              @relation(fields: [claimId], references: [id])
  wardId                Int?                // Link to maternity ward
  ward                  Ward?               @relation(fields: [wardId], references: [id])
  bedId                 Int?                // Link to specific bed
  bed                   Bed?                @relation(fields: [bedId], references: [id])
  laboratoryId          Int?                // Link to lab tests ordered
  laboratory            Laboratory?         @relation(fields: [laboratoryId], references: [id])
  radiologyId           Int?                // Link to radiology tests ordered
  radiology             Radiology?          @relation(fields: [radiologyId], references: [id])
  pharmacyId            Int?                // Link to prescriptions
  pharmacy              Pharmacy?           @relation(fields: [pharmacyId], references: [id])
  operationTheatreId    Int?                // Link to operation theatre for cesarean
  operationTheatre      OperationTheatre?   @relation(fields: [operationTheatreId], references: [id])
  notes                 String?             // Additional notes
  createdById           Int?                // User who created the maternity record
  createdBy             User?               @relation("MaternityCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation("MaternityUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("MaternityAuditLogs")
  maternityDocuments    MaternityDocument[] @relation("MaternityDocuments")
  maternityNotifications MaternityNotification[] @relation("MaternityNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model MaternityDocument {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  maternityId           Int
  maternity             Maternity           @relation("MaternityDocuments", fields: [maternityId], references: [id])
  documentType          String              // e.g., "Ultrasound Report", "Birth Certificate"
  filePath              String              // Path to stored document
  description           String?             // Description of document
  uploadedById          Int?                // User who uploaded document
  uploadedBy            User?               @relation(fields: [uploadedById], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  auditLogs             AuditLog[]          @relation("MaternityDocumentAuditLogs")
}

model MaternityNotification {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  maternityId           Int
  maternity             Maternity           @relation("MaternityNotifications", fields: [maternityId], references: [id])
  notificationType      String              // e.g., "SMS", "Email", "App Push"
  status                NotificationStatus  @default(PENDING)
  sentAt                DateTime?
  recipientId           Int?                // User or patient receiving notification
  recipient             User?               @relation(fields: [recipientId], references: [id])
  message               String?             // Notification content
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

// =========================================
// VACCINATION
// =========================================

// vaccination.prisma
enum VaccinationStatus {
  SCHEDULED
  ADMINISTERED
  CANCELLED
  MISSED
  PENDING
}

enum VaccineType {
  COVID_19
  INFLUENZA
  MMR
  HEPATITIS_B
  TETANUS
  POLIO
  HPV
  PNEUMOCOCCAL
  OTHER
}

enum VaccinationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Vaccination {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  vaccinationNumber   String                @unique // Unique vaccination ID (e.g., "VAC-2025-001")
  patientId           Int                   // Link to patient
  patient             Patient               @relation(fields: [patientId], references: [id])
  doctorId            Int?                  // Link to administering doctor
  doctor              Doctor?               @relation("VaccinationDoctor", fields: [doctorId], references: [id])
  nurseId             Int?                  // Link to administering nurse
  nurse               User?                 @relation("VaccinationNurse", fields: [nurseId], references: [id])
  appointmentId       Int?                  // Link to appointment
  appointment         Appointment?          @relation(fields: [appointmentId], references: [id])
  medicalRecordId     Int?                  // Link to medical record
  medicalRecord       MedicalRecord?        @relation(fields: [medicalRecordId], references: [id])
  clinicalRecordId    Int?                  // Link to clinical record
  clinicalRecord      ClinicalRecord?       @relation(fields: [clinicalRecordId], references: [id])
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  clinicalSettingId   Int?                  // Link to clinical setting
  clinicalSetting     ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  vaccineId           Int?                  // Link to vaccine (medication)
  vaccine             Medication?           @relation(fields: [vaccineId], references: [id])
  type                VaccineType           // Type of vaccine
  status              VaccinationStatus     @default(SCHEDULED)
  scheduledDate       DateTime?             // Scheduled vaccination date
  administeredDate    DateTime?             // Actual administration date
  batchNumber         String?               // Vaccine batch number
  expiryDate          DateTime?             // Vaccine expiry date
  doseNumber          Int?                  // e.g., 1 for first dose, 2 for second
  totalDoses          Int?                  // Total doses required
  administrationRoute  String?               // e.g., "Intramuscular", "Subcutaneous"
  administrationSite  String?               // e.g., "Left Arm"
  lotNumber           String?               // Lot number for tracking
  manufacturer        String?               // Vaccine manufacturer
  adverseReactions    String?               // JSON or text for adverse reactions
  notes               String?               // Additional notes
  priority            VaccinationPriority?  // Priority level
  billingId           Int?                  // Link to billing
  billing             Billing?              @relation(fields: [billingId], references: [id])
  claimId             Int?                  // Link to insurance claim
  claim               Claim?                @relation(fields: [claimId], references: [id])
  nhifClaimId         Int?                  // Link to NHIF claim
  nhifClaim           NhifClaim?            @relation(fields: [nhifClaimId], references: [id])
  pharmacyId          Int?                  // Link to pharmacy for vaccine supply
  pharmacy            Pharmacy?             @relation(fields: [pharmacyId], references: [id])
  inventoryId         Int?                  // Link to inventory
  inventory           Inventory?            @relation(fields: [inventoryId], references: [id])
  documents           String?               // JSON or file paths for vaccination documents
  createdById         Int?                  // User who created the record
  createdBy           User?                 @relation("VaccinationCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("VaccinationUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("VaccinationAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model VaccinationCampaign {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  name                String                // e.g., "Annual Flu Vaccination Drive"
  description         String?               // Campaign description
  startDate           DateTime              @default(now())
  endDate             DateTime?             // Campaign end date
  vaccineType         VaccineType           // Targeted vaccine type
  targetPopulation    String?               // e.g., "Children under 5", "Healthcare Workers"
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  status              String                @default(ACTIVE) // ACTIVE, INACTIVE, COMPLETED
  targetCount         Int?                  // Target number of vaccinations
  actualCount         Int?                  // Actual number of vaccinations
  budget              Float?                // Campaign budget
  actualCost          Float?                // Actual cost incurred
  notes               String?               // Additional notes
  documents           String?               // JSON or file paths for campaign documents
  vaccinations        Vaccination[]         // Vaccinations linked to campaign
  createdById         Int?                  // User who created the campaign
  createdBy           User?                 @relation("CampaignCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("CampaignUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("VaccinationCampaignAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

// =========================================
// PHARMACY
// =========================================

// pharmacy.prisma
enum MedicationStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
  RECALLED
}

enum MedicationCategory {
  ANTIBIOTIC
  ANALGESIC
  ANTIHYPERTENSIVE
  ANTIDIABETIC
  NARCOTIC
  VACCINE
  OTHER
}

enum DrugInteractionSeverity {
  LOW
  MODERATE
  HIGH
  CRITICAL
}

model Pharmacy {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  patientId           Int?                  // Link to patient
  patient             Patient?              @relation(fields: [patientId], references: [id])
  appointmentId       Int?                  // Link to appointment
  appointment         Appointment?          @relation(fields: [appointmentId], references: [id])
  emergencyId         Int?                  // Link to emergency
  emergency           Emergency?            @relation(fields: [emergencyId], references: [id])
  homeCareId          Int?                  // Link to home care
  homeCare            HomeCare?             @relation(fields: [homeCareId], references: [id])
  clinicalRecordId    Int?                  // Link to clinical record
  clinicalRecord      ClinicalRecord?       @relation(fields: [clinicalRecordId], references: [id])
  invoiceId           Int?                  // Link to invoice
  invoice             Invoice?              @relation(fields: [invoiceId], references: [id])
  prescriptionId      Int?                  // Link to prescription
  prescription        Prescription?         @relation(fields: [prescriptionId], references: [id])
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  status              String                @default(PENDING) // e.g., PENDING, DISPENSED
  medicationDetails   String?               // JSON or text for dispensed medications
  createdById         Int?                  // User who created the record
  createdBy           User?                 @relation("PharmacyCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("PharmacyUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("PharmacyAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Medication {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  name                String
  genericName         String?
  category            MedicationCategory
  status              MedicationStatus      @default(ACTIVE)
  batchNumber         String
  barcode             String?               @unique
  rfid                String?               @unique
  stockQuantity       Int
  minStockThreshold   Int                   @default(10)
  maxStockThreshold   Int?
  price               Float
  costPrice           Float?
  expiryDate          DateTime
  manufactureDate     DateTime?
  supplierId          Int?
  supplier            Supplier?             @relation(fields: [supplierId], references: [id])
  formularyId         Int?
  formulary           Formulary?            @relation(fields: [formularyId], references: [id])
  narcotic            Boolean               @default(false)
  controlledSubstance Boolean               @default(false)
  storageConditions   String?
  dosageForm          String?
  strength            String?
  packSize            String?
  departmentId        Int?
  department          Department?           @relation(fields: [departmentId], references: [id])
  pharmacyId          Int?
  pharmacy            Pharmacy?             @relation(fields: [pharmacyId], references: [id])
  procurementId       Int?
  procurement         Procurement?          @relation(fields: [procurementId], references: [id])
  inventoryId         Int?
  inventory           Inventory?            @relation(fields: [inventoryId], references: [id])
  prescriptions       PrescriptionItem[]
  dispensingRecords   DispensingRecord[]
  stockAdjustments    StockAdjustment[]
  purchaseOrderItems  PurchaseOrderItem[]
  drugInteractions1   DrugInteraction[]     @relation("Medication1")
  drugInteractions2   DrugInteraction[]     @relation("Medication2")
  adverseReactions    AdverseReaction[]
  storageLocation     String?
  lotNumber           String?
  documents           String?
  createdById         Int?
  createdBy           User?                 @relation("MedicationCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?
  updatedBy           User?                 @relation("MedicationUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("MedicationAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Formulary {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  name                String
  description         String?
  status              String                @default(ACTIVE)
  medications         Medication[]
  departmentId        Int?
  department          Department?           @relation(fields: [departmentId], references: [id])
  restrictions        String?
  version             String?
  effectiveDate       DateTime              @default(now())
  expiryDate          DateTime?
  createdById         Int?
  createdBy           User?                 @relation("FormularyCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?
  updatedBy           User?                 @relation("FormularyUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("FormularyAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model DrugInteraction {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  medicationId1       Int
  medication1         Medication            @relation("Medication1", fields: [medicationId1], references: [id])
  medicationId2       Int
  medication2         Medication            @relation("Medication2", fields: [medicationId2], references: [id])
  interaction         String
  severity            DrugInteractionSeverity
  recommendation      String?
  createdById         Int?
  createdBy           User?                 @relation("InteractionCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?
  updatedBy           User?                 @relation("InteractionUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("DrugInteractionAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model AdverseReaction {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  medicationId        Int
  medication          Medication            @relation(fields: [medicationId], references: [id])
  patientId           Int?
  patient             Patient?              @relation(fields: [patientId], references: [id])
  reaction            String
  severity            String
  reportedDate        DateTime              @default(now())
  medicalRecordId     Int?
  medicalRecord       MedicalRecord?        @relation(fields: [medicalRecordId], references: [id])
  clinicalRecordId    Int?
  clinicalRecord      ClinicalRecord?       @relation(fields: [clinicalRecordId], references: [id])
  notes               String?
  createdById         Int?
  createdBy           User?                 @relation("AdverseReactionCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?
  updatedBy           User?                 @relation("AdverseReactionUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("AdverseReactionAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

// =========================================
// DEPARTMENTS
// =========================================

// departments.prisma
enum DepartmentStatus {
  ACTIVE
  INACTIVE
  UNDER_MAINTENANCE
}

model Department {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  name                String                @unique // e.g., "Cardiology"
  description         String?               // Detailed description of department
  status              DepartmentStatus      @default(ACTIVE)
  location            String?               // Physical location (e.g., "Building A, Floor 2")
  headId              Int?                  // Head of department (User)
  head                User?                 @relation("DepartmentHead", fields: [headId], references: [id])
  phoneNumber         String?               // Department contact number
  email               String?               // Department email
  operatingHours      String?               // JSON or text for operating hours (e.g., {"mon": "08:00-17:00"})
  capacity            Int?                  // Max patient capacity
  doctors             Doctor[]              // Doctors assigned to department
  appointments        Appointment[]         // Appointments for this department
  admissions          Admission[]           // Admissions linked to department
  wards               Ward[]                // Wards managed by department
  clinicalRecords     ClinicalRecord[]      // Clinical records associated with department
  clinicalSettings    ClinicalSetting[]     // Clinical settings for department
  cssdRequisitions    CSSDRequisition[]     // CSSD requisitions from department
  inventoryItems      Inventory[]           // Inventory items managed by department
  procurements        Procurement[]         // Procurement requests from department
  costCenters         CostCenter[]          // Cost centers linked to department
  budgets             Budget[]              // Budgets allocated to department
  transactions        Transaction[]         // Transactions linked to department
  invoices            Invoice[]             // Invoices associated with department
  claims              Claim[]               // Insurance claims linked to department
  nhifClaims          NhifClaim[]           // NHIF claims linked to department
  laboratoryTests     Laboratory[]          // Lab tests ordered by department
  radiologyTests      Radiology[]           // Radiology tests ordered by department
  pharmacyRecords     Pharmacy[]            // Pharmacy records linked to department
  operationTheatres   OperationTheatre[]    // Operation theatres managed by department
  nursingRecords      Nursing[]             // Nursing records linked to department
  maternityRecords    Maternity[]           // Maternity records linked to department
  vaccinationRecords  Vaccination[]         // Vaccination records linked to department
  reports             Report[]              // Reports generated for department
  helpdeskTickets     Helpdesk[]            // Helpdesk tickets raised by department
  createdById         Int?                  // User who created the department
  createdBy           User?                 @relation("DepartmentCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("DepartmentUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("DepartmentAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

// =========================================
// DISPENSARY
// =========================================

// dispensary.prisma
enum PrescriptionStatus {
  PENDING
  DISPENSED
  PARTIALLY_DISPENSED
  CANCELLED
  ON_HOLD
  EXPIRED
}

enum PatientType {
  INPATIENT
  OUTPATIENT
}

enum StockAdjustmentType {
  INCREASE
  DECREASE
  DAMAGED
  EXPIRED
  TRANSFER
}

model Prescription {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  patientId           Int                   // Link to patient
  patient             Patient               @relation("Prescriptions", fields: [patientId], references: [id])
  doctorId            Int                   // Link to prescribing doctor
  doctor              Doctor                @relation("Prescriptions", fields: [doctorId], references: [id])
  appointmentId       Int?                  // Link to appointment
  appointment         Appointment?          @relation(fields: [appointmentId], references: [id])
  admissionId         Int?                  // Link to admission for inpatient prescriptions
  admission           Admission?            @relation(fields: [admissionId], references: [id])
  clinicalRecordId    Int?                  // Link to clinical record
  clinicalRecord      ClinicalRecord?       @relation(fields: [clinicalRecordId], references: [id])
  pharmacyId          Int?                  // Link to pharmacy
  pharmacy            Pharmacy?             @relation(fields: [pharmacyId], references: [id])
  status              PrescriptionStatus    @default(PENDING)
  prescriptionDate    DateTime              @default(now())
  expiryDate          DateTime?             // Prescription expiry date
  notes               String?               // Additional notes
  priority            String?               // e.g., "URGENT", "ROUTINE"
  items               PrescriptionItem[]    // Medications in prescription
  dispensingRecords   DispensingRecord[]    // Dispensing records
  invoiceId           Int?                  // Link to invoice
  invoice             Invoice?              @relation(fields: [invoiceId], references: [id])
  claimId             Int?                  // Link to insurance claim
  claim               Claim?                @relation(fields: [claimId], references: [id])
  nhifClaimId         Int?                  // Link to NHIF claim
  nhifClaim           NhifClaim?            @relation(fields: [nhifClaimId], references: [id])
  createdById         Int?                  // User who created prescription
  createdBy           User?                 @relation("PrescriptionCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("PrescriptionUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("PrescriptionAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model PrescriptionItem {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  prescriptionId      Int                   // Link to prescription
  prescription        Prescription          @relation(fields: [prescriptionId], references: [id])
  medicationId        Int                   // Link to medication
  medication          Medication            @relation(fields: [medicationId], references: [id])
  dosage              String                // e.g., "500mg"
  quantity            Int                   // Quantity prescribed
  frequency           String                // e.g., "Twice daily"
  duration            String                // e.g., "7 days"
  route               String?               // e.g., "Oral", "IV"
  instructions        String?               // Special instructions (e.g., "Take with food")
  refillCount         Int?                  @default(0) // Number of allowed refills
  createdById         Int?                  // User who added item
  createdBy           User?                 @relation("PrescriptionItemCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("PrescriptionItemUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("PrescriptionItemAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model DispensingRecord {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  prescriptionId      Int                   // Link to prescription
  prescription        Prescription          @relation(fields: [prescriptionId], references: [id])
  medicationId        Int                   // Link to medication
  medication          Medication            @relation(fields: [medicationId], references: [id])
  patientType         PatientType           // INPATIENT, OUTPATIENT
  quantity            Int                   // Quantity dispensed
  dispensedDate       DateTime              @default(now())
  dispensedById       Int                   // User who dispensed
  dispensedBy         User                  @relation("DispensedBy", fields: [dispensedById], references: [id])
  pharmacyId          Int?                  // Link to pharmacy
  pharmacy            Pharmacy?             @relation(fields: [pharmacyId], references: [id])
  invoiceId           Int?                  // Link to invoice
  invoice             Invoice?              @relation(fields: [invoiceId], references: [id])
  batchNumber         String?               // Batch number of medication
  expiryDate          DateTime?             // Expiry date of dispensed medication
  notes               String?               // Additional dispensing notes
  status              String                @default(DISPENSED) // DISPENSED, PARTIALLY_DISPENSED, RETURNED
  createdById         Int?                  // User who created record
  createdBy           User?                 @relation("DispensingRecordCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("DispensingRecordUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("DispensingRecordAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model StockAdjustment {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  medicationId        Int                   // Link to medication
  medication          Medication            @relation(fields: [medicationId], references: [id])
  pharmacyId          Int?                  // Link to pharmacy
  pharmacy            Pharmacy?             @relation(fields: [pharmacyId], references: [id])
  quantity            Int                   // Quantity adjusted
  adjustmentType      StockAdjustmentType   // INCREASE, DECREASE, DAMAGED, EXPIRED, TRANSFER
  reason              String                // Reason for adjustment
  adjustedById        Int                   // User who made adjustment
  adjustedBy          User                  @relation("AdjustedBy", fields: [adjustedById], references: [id])
  approvedById        Int?                  // User who approved adjustment
  approvedBy          User?                 @relation("AdjustmentApprovedBy", fields: [approvedById], references: [id])
  adjustmentDate      DateTime              @default(now())
  batchNumber         String?               // Batch number of adjusted stock
  expiryDate          DateTime?             // Expiry date of adjusted stock
  procurementId       Int?                  // Link to procurement for restocking
  procurement         Procurement?          @relation(fields: [procurementId], references: [id])
  inventoryId         Int?                  // Link to inventory
  inventory           Inventory?            @relation(fields: [inventoryId], references: [id])
  notes               String?               // Additional notes
  auditLogs           AuditLog[]            @relation("StockAdjustmentAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

// =========================================
// BILLING
// =========================================

// billing.prisma
enum InvoiceStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  OVERDUE
  REFUNDED
  CANCELLED
  VOID
  DISPUTED
}

enum BillingItemType {
  SERVICE
  MEDICATION
  LAB_TEST
  RADIOLOGY
  PROCEDURE
  ROOM_CHARGE
  CONSULTATION
  EQUIPMENT
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  PROCESSING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  PARTIAL
  REVERSED
}

enum ServiceType {
  CONSULTATION
  PROCEDURE
  DIAGNOSTIC
  THERAPY
  SURGERY
  OTHER
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model Service {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  name                String                // e.g., "Cardiology Consultation", "Appendectomy"
  description         String?               // Service description
  type                ServiceType           // Type of service
  status              ServiceStatus         @default(ACTIVE) // Service availability status
  departmentId        Int?                  // Link to department providing the service
  department          Department?           @relation(fields: [departmentId], references: [id])
  clinicalSettingId   Int?                  // Link to clinical setting
  clinicalSetting     ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  basePrice           Float                 // Standard price for the service
  taxCategoryId       Int?                  // Link to tax category
  taxCategory         TaxCategory?          @relation(fields: [taxCategoryId], references: [id])
  duration            Int?                  // Expected duration in minutes (optional)
  billingItems        BillingItem[]         @relation // Link to billing items
  billing             Billing[]             @relation("BillingServices") // Link to billing records
  createdById         Int?                  // User who created the service
  createdBy           User?                 @relation("ServiceCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("ServiceUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("ServiceAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Billing {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  patientId             Int?                // Link to patient
  patient               Patient?            @relation(fields: [patientId], references: [id])
  appointmentId         Int?                // Link to appointment
  appointment           Appointment?        @relation(fields: [appointmentId], references: [id])
  serviceId           Int?                // Link to specific service
  service             Service?            @relation("BillingServices", fields: [serviceId], references: [id])
  totalAmount           Float               // Total billing amount
  taxAmount             Float?              @default(0.0)
  discountAmount        Float?              @default(0.0)
  status                InvoiceStatus       @default(PENDING) // Using existing InvoiceStatus enum
  paymentMethod         PaymentMethod?      // Using centralized PaymentMethod enum
  invoiceNumber         String              @unique // Unique identifier for billing record
  issuedDate            DateTime            @default(now())
  dueDate               DateTime?
  createdById           Int?                // User who created the billing record
  createdBy             User?               @relation("BillingCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy           User?               @relation("BillingUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("BillingAuditLogs")
  notifications         BillingNotification[] @relation("BillingNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Invoice {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  patientId             Int
  patient               Patient             @relation(fields: [patientId], references: [id])
  prescriptionId        Int?
  prescription          Prescription?       @relation(fields: [prescriptionId], references: [id])
  appointmentId         Int?
  appointment           Appointment?        @relation(fields: [appointmentId], references: [id])
  admissionId           Int?
  admission             Admission?          @relation(fields: [admissionId], references: [id])
  laboratoryId          Int?
  laboratory            Laboratory?         @relation(fields: [laboratoryId], references: [id])
  radiologyId           Int?
  radiology             Radiology?          @relation(fields: [radiologyId], references: [id])
  pharmacyId            Int?
  pharmacy              Pharmacy?           @relation(fields: [pharmacyId], references: [id])
  operationTheatreId    Int?
  operationTheatre      OperationTheatre?   @relation(fields: [operationTheatreId], references: [id])
  totalAmount           Float
  taxAmount             Float?              @default(0.0)
  discountAmount        Float?              @default(0.0)
  status                InvoiceStatus       @default(PENDING)
  paymentMethod         PaymentMethod?
  transactionId         Int?
  transaction           Transaction?        @relation("TransactionInvoices", fields: [transactionId], references: [id])
  claimId               Int?
  claim                 Claim?              @relation(fields: [claimId], references: [id])
  nhifClaimId           Int?
  nhifClaim             NhifClaim?          @relation(fields: [nhifClaimId], references: [id])
  departmentId          Int?
  department            Department?         @relation(fields: [departmentId], references: [id])
  invoiceNumber         String              @unique
  dueDate               DateTime?
  issuedDate            DateTime            @default(now())
  dispensingRecords     DispensingRecord[]
  refunds               Refund[]
  billingItems          BillingItem[]       @relation("InvoiceBillingItems")
  costCenterId          Int?
  costCenter            CostCenter?         @relation(fields: [costCenterId], references: [id])
  insuranceId           Int?
  insurance             Insurance?          @relation(fields: [insuranceId], references: [id])
  paymentTerms          String?             // e.g., "Net 30", "Due on Receipt"
  notes                 String?
  createdById           Int?
  createdBy             User?               @relation("InvoiceCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?
  updatedBy             User?               @relation("InvoiceUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("InvoiceAuditLogs")
  paymentPlans          PaymentPlan[]       @relation("InvoicePaymentPlans")
  invoiceDocuments      InvoiceDocument[]   @relation("InvoiceDocuments")
  notifications         BillingNotification[] @relation("InvoiceNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model BillingItem {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  invoiceId             Int
  invoice               Invoice             @relation("InvoiceBillingItems", fields: [invoiceId], references: [id])
  itemType              BillingItemType     // SERVICE, MEDICATION, LAB_TEST, etc.
  description           String
  quantity              Int                 @default(1)
  unitPrice             Float
  totalPrice            Float
  taxAmount             Float?              @default(0.0)
  discountAmount        Float?              @default(0.0)
  serviceId             Int?                // Link to specific service (e.g., consultation, procedure)
  service               Service?            @relation(fields: [serviceId], references: [id])
  medicationId          Int?                // Link to medication
  medication            Medication?         @relation(fields: [medicationId], references: [id])
  taxCategoryId         Int?                // Link to tax category
  taxCategory           TaxCategory?        @relation(fields: [taxCategoryId], references: [id])
  createdById           Int?                // User who added item
  createdBy             User?               @relation(fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated item
  updatedBy             User?               @relation(fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("BillingItemAuditLogs")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Refund {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  invoiceId             Int
  invoice               Invoice             @relation(fields: [invoiceId], references: [id])
  reason                String
  amount                Float
  refundDate            DateTime            @default(now())
  transactionId         Int?
  transaction           Transaction?        @relation(fields: [transactionId], references: [id])
  processedById         Int
  processedBy           User                @relation("ProcessedBy", fields: [processedById], references: [id])
  approvedById          Int?                // User who approved the refund
  approvedBy            User?               @relation("RefundApprovedBy", fields: [approvedById], references: [id])
  status                RefundStatus        @default(PENDING)
  notes                 String?
  refundMethod          PaymentMethod?      // Method used for refund
  refundReference       String?             @unique // External refund reference
  auditLogs             AuditLog[]          @relation("RefundAuditLogs")
  notifications         BillingNotification[] @relation("RefundNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model PaymentPlan {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  invoiceId             Int
  invoice               Invoice             @relation("InvoicePaymentPlans", fields: [invoiceId], references: [id])
  totalAmount           Float
  installmentAmount     Float
  numberOfInstallments  Int
  startDate             DateTime
  endDate               DateTime?
  status                String              @default("ACTIVE") // ACTIVE, COMPLETED, DEFAULTED
  createdById           Int?                // User who created payment plan
  createdBy             User?               @relation(fields: [createdById], references: [id])
  approvedById          Int?                // User who approved payment plan
  approvedBy            User?               @relation(fields: [approvedById], references: [id])
  payments              Payment[]           @relation("PaymentPlanPayments")
  auditLogs             AuditLog[]          @relation("PaymentPlanAuditLogs")
  notifications         BillingNotification[] @relation("PaymentPlanNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Payment {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  invoiceId             Int?
  invoice               Invoice?            @relation(fields: [invoiceId], references: [id])
  paymentPlanId         Int?
  paymentPlan           PaymentPlan?        @relation("PaymentPlanPayments", fields: [paymentPlanId], references: [id])
  amount                Float
  paymentDate           DateTime            @default(now())
  paymentMethod         PaymentMethod
  transactionId         Int?
  transaction           Transaction?        @relation(fields: [transactionId], references: [id])
  referenceNumber       String?             @unique // External payment reference
  status                PaymentStatus       @default(PENDING)
  createdById           Int?                // User who recorded payment
  createdBy             User?               @relation(fields: [createdById], references: [id])
  notes                 String?
  auditLogs             AuditLog[]          @relation("PaymentAuditLogs")
  notifications         BillingNotification[] @relation("PaymentNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model InvoiceDocument {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  invoiceId             Int
  invoice               Invoice             @relation("InvoiceDocuments", fields: [invoiceId], references: [id])
  documentType          String              // e.g., "Invoice PDF", "Receipt"
  filePath              String              // Path to stored document
  uploadedById          Int?                // User who uploaded document
  uploadedBy            User?               @relation(fields: [uploadedById], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  auditLogs             AuditLog[]          @relation("InvoiceDocumentAuditLogs")
}

model BillingNotification {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  invoiceId             Int?
  invoice               Invoice?            @relation("InvoiceNotifications", fields: [invoiceId], references: [id])
  refundId              Int?
  refund                Refund?             @relation("RefundNotifications", fields: [refundId], references: [id])
  paymentId             Int?
  payment               Payment?            @relation("PaymentNotifications", fields: [paymentId], references: [id])
  paymentPlanId         Int?
  paymentPlan           PaymentPlan?        @relation("PaymentPlanNotifications", fields: [paymentPlanId], references: [id])
  notificationType      String              // e.g., "SMS", "Email", "App Push"
  status                NotificationStatus  @default(PENDING)
  sentAt                DateTime?
  recipientId           Int?                // User or patient receiving notification
  recipient             User?               @relation(fields: [recipientId], references: [id])
  message               String?             // Notification content
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

// =========================================
// ACCOUNTING
// =========================================

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
  REFUND
  ADJUSTMENT
  PAYROLL
  DEPRECIATION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  ON_HOLD
  PROCESSING
  REVERSED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_PAYMENT
  INSURANCE
  BANK_TRANSFER
  CHECK
  DIGITAL_WALLET
  CRYPTO
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum BudgetStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  CLOSED
}

enum ReconciliationStatus {
  PENDING
  RECONCILED
  DISCREPANCY
  UNDER_REVIEW
}

model Transaction {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  description       String
  amount            Float
  currency          String              @default("USD")
  type              TransactionType
  status            TransactionStatus
  paymentMethod     PaymentMethod?
  date              DateTime            @default(now())
  referenceNumber   String?             @unique
  taxAmount         Float?              @default(0.0)
  discountAmount    Float?              @default(0.0)
  costCenterId      Int?
  costCenter        CostCenter?         @relation(fields: [costCenterId], references: [id])
  patientId         Int?
  patient           Patient?            @relation("PatientTransactions", fields: [patientId], references: [id])
  invoiceId         Int?
  invoice           Invoice?            @relation("TransactionInvoices", fields: [invoiceId], references: [id])
  claimId           Int?
  claim             Claim?              @relation("TransactionClaims", fields: [claimId], references: [id])
  nhifClaimId       Int?
  nhifClaim         NhifClaim?          @relation("TransactionNhifClaims", fields: [nhifClaimId], references: [id])
  departmentId      Int?
  department        Department?         @relation(fields: [departmentId], references: [id])
  procurementId     Int?
  procurement       Procurement?        @relation("TransactionProcurement", fields: [procurementId], references: [id])
  fixedAssetId      Int?
  fixedAsset        FixedAsset?         @relation("TransactionFixedAssets", fields: [fixedAssetId], references: [id])
  createdById       Int?
  createdBy         User?               @relation("TransactionCreatedBy", fields: [createdById], references: [id])
  approvedById      Int?
  approvedBy        User?               @relation("TransactionApprovedBy", fields: [approvedById], references: [id])
  generalLedgerId   Int?
  generalLedger     GeneralLedger?      @relation("TransactionGeneralLedger", fields: [generalLedgerId], references: [id])
  budgetId          Int?
  budget            Budget?             @relation(fields: [budgetId], references: [id])
  reconciliations   Reconciliation[]    @relation("TransactionReconciliations")
  auditLogs         AuditLog[]          @relation("TransactionAuditLogs")
  taxCategoryId     Int?
  taxCategory       TaxCategory?        @relation(fields: [taxCategoryId], references: [id])
  paymentTerms      String?             // e.g., "Net 30", "Due on Receipt"
  dueDate           DateTime?
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  payrolls          Payroll[]           @relation("TransactionPayrolls")
}

model CostCenter {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  name              String
  code              String              @unique // e.g., "CC-CARDIO-001"
  description       String?
  departmentId      Int?
  department        Department?         @relation(fields: [departmentId], references: [id])
  transactions      Transaction[]
  budgetId          Int?
  budget            Budget?             @relation(fields: [budgetId], references: [id])
  managerId         Int?
  manager           User?               @relation(fields: [managerId], references: [id])
  parentCostCenterId Int?               // Hierarchical cost centers
  parentCostCenter  CostCenter?         @relation("CostCenterHierarchy", fields: [parentCostCenterId], references: [id])
  subCostCenters    CostCenter[]        @relation("CostCenterHierarchy")
  costAllocations   CostAllocation[]    @relation("CostCenterAllocations")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  auditLogs         AuditLog[]          @relation("CostCenterAuditLogs")
}

model Budget {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  name              String
  code              String              @unique // e.g., "BUD-2025-001"
  fiscalYear        Int
  amount            Float
  remainingAmount   Float
  departmentId      Int?
  department        Department?         @relation(fields: [departmentId], references: [id])
  costCenterId      Int?
  costCenter        CostCenter?         @relation(fields: [costCenterId], references: [id])
  transactions      Transaction[]
  createdById       Int?
  createdBy         User?               @relation(fields: [createdById], references: [id])
  approvedById      Int?
  approvedBy        User?               @relation(fields: [approvedById], references: [id])
  status            BudgetStatus        @default(DRAFT)
  startDate         DateTime
  endDate           DateTime
  budgetItems       BudgetItem[]        @relation("BudgetItems")
  costAllocations   CostAllocation[]    @relation("BudgetAllocations")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  auditLogs         AuditLog[]          @relation("BudgetAuditLogs")
}

model BudgetItem {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  budgetId          Int
  budget            Budget              @relation("BudgetItems", fields: [budgetId], references: [id])
  name              String              // e.g., "Staff Salaries"
  amount            Float
  remainingAmount   Float
  category          String              // e.g., "Payroll", "Supplies"
  description       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Reconciliation {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  transactionId     Int
  transaction       Transaction         @relation("TransactionReconciliations", fields: [transactionId], references: [id])
  bankStatementId   Int?
  bankStatement     BankStatement?      @relation(fields: [bankStatementId], references: [id])
  reconciledDate    DateTime?
  status            ReconciliationStatus @default(PENDING)
  discrepancyAmount Float?              @default(0.0)
  notes             String?
  createdById       Int?
  createdBy         User?               @relation(fields: [createdById], references: [id])
  approvedById      Int?
  approvedBy        User?               @relation(fields: [approvedById], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  auditLogs         AuditLog[]          @relation("ReconciliationAuditLogs")
}

model BankStatement {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  statementDate     DateTime
  referenceNumber   String              @unique
  amount            Float
  currency          String              @default("USD")
  bankAccountId     Int?
  bankAccount       BankAccount?        @relation(fields: [bankAccountId], references: [id])
  reconciliations   Reconciliation[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model BankAccount {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  accountNumber     String              @unique
  bankName          String
  branchName        String?
  accountType       String              // e.g., "Checking", "Savings"
  balance           Float               @default(0.0)
  currency          String              @default("USD")
  departmentId      Int?
  department        Department?         @relation(fields: [departmentId], references: [id])
  bankStatements    BankStatement[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  auditLogs         AuditLog[]          @relation("BankAccountAuditLogs")
}

model GeneralLedger {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  accountCode       String              @unique
  accountName       String
  accountType       AccountType
  balance           Float               @default(0.0)
  transactions      Transaction[]       @relation("TransactionGeneralLedger")
  departmentId      Int?
  department        Department?         @relation(fields: [departmentId], references: [id])
  parentAccountId   Int?                // Hierarchical chart of accounts
  parentAccount     GeneralLedger?      @relation("GeneralLedgerHierarchy", fields: [parentAccountId], references: [id])
  subAccounts       GeneralLedger[]     @relation("GeneralLedgerHierarchy")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  auditLogs         AuditLog[]          @relation("GeneralLedgerAuditLogs")
}

model TaxCategory {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  name              String              // e.g., "VAT", "Sales Tax"
  rate              Float               // e.g., 0.16 for 16%
  description       String?
  transactions      Transaction[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  auditLogs         AuditLog[]          @relation("TaxCategoryAuditLogs")
}

model CostAllocation {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  costCenterId      Int
  costCenter        CostCenter          @relation("CostCenterAllocations", fields: [costCenterId], references: [id])
  budgetId          Int?
  budget            Budget?             @relation("BudgetAllocations", fields: [budgetId], references: [id])
  amount            Float
  allocationDate    DateTime
  description       String?
  createdById       Int?
  createdBy         User?               @relation(fields: [createdById], references: [id])
  approvedById      Int?
  approvedBy        User?               @relation(fields: [approvedById], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  auditLogs         AuditLog[]          @relation("CostAllocationAuditLogs")
}

model Payroll {
  id                Int                 @id @default(autoincrement())
  uuid              String              @unique @default(uuid())
  employeeId        Int
  employee          User                @relation("PayrollEmployee", fields: [employeeId], references: [id])
  transactionId     Int?
  transaction       Transaction?         @relation("TransactionPayrolls", fields: [transactionId], references: [id])
  grossAmount       Float
  netAmount         Float
  deductions        Float               @default(0.0)
  taxes             Float               @default(0.0)
  payPeriodStart    DateTime
  payPeriodEnd      DateTime
  paymentDate       DateTime
  status            TransactionStatus    @default(PENDING)
  paymentMethod     PaymentMethod
  departmentId      Int?
  department        Department?         @relation(fields: [departmentId], references: [id])
  costCenterId      Int?
  costCenter        CostCenter?         @relation(fields: [costCenterId], references: [id])
  createdById       Int?
  createdBy         User?               @relation("PayrollCreatedBy", fields: [createdById], references: [id])
  approvedById      Int?
  approvedBy        User?               @relation("PayrollApprovedBy", fields: [approvedById], references: [id])
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  auditLogs         AuditLog[]          @relation("PayrollAuditLogs")
}

// =========================================
// CLAIM MGMT
// =========================================

enum ClaimStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
  PARTIALLY_APPROVED
  PAID
  DENIED
  UNDER_REVIEW
  APPEALED
}

enum ClaimType {
  INPATIENT
  OUTPATIENT
  PHARMACY
  LABORATORY
  RADIOLOGY
  SURGICAL
  DIAGNOSTIC
  EMERGENCY
  REHABILITATION
}


model Claim {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  patientId             Int
  patient               Patient             @relation(fields: [patientId], references: [id])
  invoiceId             Int?
  invoice               Invoice?            @relation(fields: [invoiceId], references: [id])
  appointmentId         Int?
  appointment           Appointment?        @relation(fields: [appointmentId], references: [id])
  admissionId           Int?
  admission             Admission?          @relation(fields: [admissionId], references: [id])
  pharmacyId            Int?
  pharmacy              Pharmacy?           @relation(fields: [pharmacyId], references: [id])
  laboratoryId          Int?
  laboratory            Laboratory?         @relation(fields: [laboratoryId], references: [id])
  radiologyId           Int?
  radiology             Radiology?          @relation(fields: [radiologyId], references: [id])
  operationTheatreId    Int?
  operationTheatre      OperationTheatre?   @relation(fields: [operationTheatreId], references: [id])
  nhifClaimId           Int?
  nhifClaim             NhifClaim?          @relation(fields: [nhifClaimId], references: [id])
  transactionId         Int?
  transaction           Transaction?        @relation("TransactionClaims", fields: [transactionId], references: [id])
  claimNumber           String              @unique // e.g., "CLM-2025-001"
  claimType             ClaimType
  status                ClaimStatus         @default(PENDING)
  submittedDate         DateTime?           // Date claim was submitted to insurer
  approvedDate          DateTime?           // Date claim was approved
  paidDate              DateTime?           // Date claim was paid
  totalAmount           Float
  approvedAmount        Float?              @default(0.0)
  patientResponsibility Float?              @default(0.0) // Patient's out-of-pocket amount
  rejectionReason       String?             // Reason for rejection or denial
  appealReason          String?             // Reason for appeal, if applicable
  appealDate            DateTime?           // Date of appeal submission
  insuranceId           Int?                // Link to insurance details
  insurance             Insurance?          @relation(fields: [insuranceId], references: [id])
  insuranceProvider     String?             // Name of insurance provider
  policyNumber          String?             // Patient's insurance policy number
  preAuthorizationCode  String?             // Pre-authorization code from insurer
  claimNotes            String?             // General notes for claim
  createdById           Int?                // User who created the claim
  createdBy             User?               @relation("ClaimCreatedBy", fields: [createdById], references: [id])
  approvedById          Int?                // User who approved the claim internally
  approvedBy            User?               @relation("ClaimApprovedBy", fields: [approvedById], references: [id])
  updatedById           Int?                // User who last updated the claim
  updatedBy             User?               @relation("ClaimUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("ClaimAuditLogs")
  claimDocuments        ClaimDocument[]     @relation("ClaimDocuments")
  claimNotifications    ClaimNotification[] @relation("ClaimNotifications")
  claimAdjustments      ClaimAdjustment[]   @relation("ClaimAdjustments")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model ClaimDocument {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  claimId               Int
  claim                 Claim               @relation("ClaimDocuments", fields: [claimId], references: [id])
  documentType          String              // e.g., "Medical Report", "Invoice", "Authorization"
  filePath              String              // Path to stored document
  uploadedById          Int?                // User who uploaded document
  uploadedBy            User?               @relation(fields: [uploadedById], references: [id])
  description           String?             // Description of document
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  auditLogs             AuditLog[]          @relation("ClaimDocumentAuditLogs")
}

model ClaimNotification {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  claimId               Int
  claim                 Claim               @relation("ClaimNotifications", fields: [claimId], references: [id])
  notificationType      String              // e.g., "SMS", "Email", "App Push"
  status                NotificationStatus  @default(PENDING)
  sentAt                DateTime?
  recipientId           Int?                // User or patient receiving notification
  recipient             User?               @relation(fields: [recipientId], references: [id])
  message               String?             // Notification content
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model ClaimAdjustment {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  claimId               Int
  claim                 Claim               @relation("ClaimAdjustments", fields: [claimId], references: [id])
  adjustmentAmount      Float
  adjustmentReason      String              // Reason for adjustment (e.g., "Coding Error", "Overcharge")
  adjustmentDate        DateTime            @default(now())
  createdById           Int?                // User who made adjustment
  createdBy             User?               @relation(fields: [createdById], references: [id])
  approvedById          Int?                // User who approved adjustment
  approvedBy            User?               @relation(fields: [approvedById], references: [id])
  notes                 String?             // Additional notes for adjustment
  auditLogs             AuditLog[]          @relation("ClaimAdjustmentAuditLogs")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Insurance {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  providerName          String              // Name of insurance provider
  providerCode          String?             @unique // Unique code for provider
  contactDetails        String?             // JSON or text for contact info
  claims                Claim[]             // Claims associated with this insurance
  patients              Patient[]           // Patients covered by this insurance
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  auditLogs             AuditLog[]          @relation("InsuranceAuditLogs")
}

// =========================================
// NHIF
// =========================================

// nhif.prisma
enum NhifClaimStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
  PARTIALLY_APPROVED
  PAID
  DENIED
  UNDER_REVIEW
}

enum NhifClaimType {
  INPATIENT
  OUTPATIENT
  PHARMACY
  SURGICAL
  MATERNITY
  DIAGNOSTIC
}

model NhifClaim {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  claimNumber         String                @unique // Unique NHIF claim ID (e.g., "NHIF-2025-001")
  patientId           Int                   // Link to patient
  patient             Patient               @relation(fields: [patientId], references: [id])
  nhifNumber          String                // Patient's NHIF membership number
  invoiceId           Int?                  // Link to invoice
  invoice             Invoice?              @relation(fields: [invoiceId], references: [id])
  appointmentId       Int?                  // Link to appointment
  appointment         Appointment?          @relation(fields: [appointmentId], references: [id])
  admissionId         Int?                  // Link to admission
  admission           Admission?            @relation(fields: [admissionId], references: [id])
  clinicalRecordId    Int?                  // Link to clinical record
  clinicalRecord      ClinicalRecord?       @relation(fields: [clinicalRecordId], references: [id])
  medicalRecordId     Int?                  // Link to medical record
  medicalRecord       MedicalRecord?        @relation(fields: [medicalRecordId], references: [id])
  laboratoryId        Int?                  // Link to lab tests
  laboratory          Laboratory?           @relation(fields: [laboratoryId], references: [id])
  radiologyId         Int?                  // Link to radiology tests
  radiology           Radiology?            @relation(fields: [radiologyId], references: [id])
  pharmacyId          Int?                  // Link to pharmacy prescriptions
  pharmacy            Pharmacy?             @relation(fields: [pharmacyId], references: [id])
  operationTheatreId  Int?                  // Link to surgical procedures
  operationTheatre    OperationTheatre?     @relation(fields: [operationTheatreId], references: [id])
  maternityId         Int?                  // Link to maternity services
  maternity           Maternity?            @relation(fields: [maternityId], references: [id])
  vaccinationId       Int?                  // Link to vaccinations
  vaccination         Vaccination?          @relation(fields: [vaccinationId], references: [id])
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  claimType           NhifClaimType         // Type of NHIF claim
  status              NhifClaimStatus       @default(PENDING)
  submittedDate       DateTime?             // Date claim was submitted to NHIF
  approvedDate        DateTime?             // Date claim was approved
  totalAmount         Float                 // Total claim amount
  approvedAmount      Float?                // Amount approved by NHIF
  rejectionReason     String?               // Reason for rejection, if applicable
  documents           String?               // JSON or file paths for attached documents
  preAuthorizationCode String?              // NHIF pre-authorization code
  treatmentCode       String?               // NHIF-specific treatment code
  diagnosisCodes      String?               // JSON or text for ICD-10 codes
  notes               String?               // Additional notes
  transactionId       Int?                  // Link to accounting transaction
  transaction         Transaction?          @relation("TransactionNhifClaims", fields: [transactionId], references: [id])
  billingId           Int?                  // Link to billing
  billing             Billing?              @relation(fields: [billingId], references: [id])
  referralId          Int?                  // Link to referral
  referral            Referral?             @relation(fields: [referralId], references: [id])
  createdById         Int?                  // User who created the claim
  createdBy           User?                 @relation("NhifClaimCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("NhifClaimUpdatedBy", fields: [updatedById], references: [id])
  reviewedById        Int?                  // User who reviewed the claim
  reviewedBy          User?                 @relation("NhifClaimReviewedBy", fields: [reviewedById], references: [id])
  auditLogs           AuditLog[]            @relation("NhifClaimAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

// =========================================
// INCENTIVE
// =========================================

enum IncentiveStatus {
  PENDING
  APPROVED
  DISBURSED
  REJECTED
  CANCELLED
}

enum IncentiveType {
  PERFORMANCE
  ATTENDANCE
  SPECIALTY
  BONUS
  REFERRAL
  OTHER
}


model Incentive {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  userId                Int                 // Link to user (e.g., doctor, nurse, staff)
  user                  User                @relation(fields: [userId], references: [id])
  doctorId              Int?                // Link to doctor if applicable
  doctor                Doctor?             @relation(fields: [doctorId], references: [id])
  departmentId          Int?                // Link to department
  department            Department?         @relation(fields: [departmentId], references: [id])
  incentiveType         IncentiveType       // Type of incentive
  status                IncentiveStatus     @default(PENDING)
  amount                Float               // Incentive amount
  description           String?             // Description of incentive (e.g., "Performance bonus for Q1")
  calculationBasis      String?             // JSON or text for calculation criteria (e.g., {"metric": "patient_satisfaction", "value": 95})
  awardedDate           DateTime?           // Date incentive was awarded
  disbursedDate         DateTime?           // Date incentive was paid
  transactionId         Int?                // Link to accounting transaction
  transaction           Transaction?        @relation(fields: [transactionId], references: [id])
  rejectionReason       String?             // Reason for rejection, if applicable
  createdById           Int?                // User who created the incentive record
  createdBy             User?               @relation("IncentiveCreatedBy", fields: [createdById], references: [id])
  approvedById          Int?                // User who approved the incentive
  approvedBy            User?               @relation("IncentiveApprovedBy", fields: [approvedById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation("IncentiveUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("IncentiveAuditLogs")
  incentiveNotifications IncentiveNotification[] @relation("IncentiveNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model IncentiveNotification {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  incentiveId           Int
  incentive             Incentive           @relation("IncentiveNotifications", fields: [incentiveId], references: [id])
  notificationType      String              // e.g., "SMS", "Email", "App Push"
  status                NotificationStatus  @default(PENDING)
  sentAt                DateTime?
  recipientId           Int?                // User receiving notification
  recipient             User?               @relation(fields: [recipientId], references: [id])
  message               String?             // Notification content
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

// =========================================
// INVENTORY
// =========================================

enum InventoryStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
  DISPOSED
}

enum InventoryType {
  MEDICATION
  MEDICAL_SUPPLIES
  EQUIPMENT
  CONSUMABLES
  OTHER
}



model Inventory {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  itemCode              String              @unique // e.g., "INV-001"
  name                  String              // Item name (e.g., "Paracetamol 500mg")
  description           String?             // Detailed description of item
  type                  InventoryType       // Type of inventory item
  status                InventoryStatus     @default(IN_STOCK)
  quantity              Int                 // Current quantity in stock
  minimumStockLevel     Int?                // Minimum stock threshold for alerts
  maximumStockLevel     Int?                // Maximum stock level for reordering
  unitPrice             Float?              // Cost per unit
  totalValue            Float?              @default(0.0) // Total value of stock (quantity * unitPrice)
  batchNumber           String?             // Batch number for tracking
  expiryDate            DateTime?           // Expiry date for perishable items
  purchaseDate          DateTime?           // Date of purchase
  supplierId            Int?                // Link to supplier
  supplier              InventorySupplier?           @relation(fields: [supplierId], references: [id])
  departmentId          Int?                // Link to department using the item
  department            Department?         @relation(fields: [departmentId], references: [id])
  clinicalSettingId     Int?                // Link to clinical setting
  clinicalSetting       ClinicalSetting?    @relation(fields: [clinicalSettingId], references: [id])
  pharmacyId            Int?                // Link to pharmacy for medication items
  pharmacy              Pharmacy?           @relation(fields: [pharmacyId], references: [id])
  storageLocation       String?             // Physical storage location (e.g., "Shelf A-12")
  reorderPoint          Int?                // Quantity at which to reorder
  reorderQuantity       Int?                // Quantity to order when reordering
  lastRestockedDate     DateTime?           // Last restock date
  createdById           Int?                // User who created the inventory record
  createdBy             User?               @relation("InventoryCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation("InventoryUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("InventoryAuditLogs")
  inventoryTransactions InventoryTransaction[] @relation("InventoryTransactions")
  inventoryNotifications InventoryNotification[] @relation("InventoryNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model InventoryTransaction {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  inventoryId           Int
  inventory             Inventory           @relation("InventoryTransactions", fields: [inventoryId], references: [id])
  transactionType       String              // e.g., "RESTOCK", "DISPENSE", "ADJUSTMENT", "DISPOSAL"
  quantity              Int                 // Quantity added or removed
  transactionDate       DateTime            @default(now())
  reason                String?             // Reason for transaction (e.g., "Patient use", "Expired")
  referenceId           Int?                // Link to related entity (e.g., prescriptionId, orderId)
  referenceType         String?             // Type of reference (e.g., "Prescription", "PurchaseOrder")
  performedById         Int?                // User who performed the transaction
  performedBy           User?               @relation(fields: [performedById], references: [id])
  notes                 String?             // Additional notes
  createdById           Int?                // User who created the transaction record
  createdBy             User?               @relation(fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation(fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("InventoryTransactionAuditLogs")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model InventoryNotification {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  inventoryId           Int
  inventory             Inventory           @relation("InventoryNotifications", fields: [inventoryId], references: [id])
  notificationType      String              // e.g., "SMS", "Email", "App Push"
  status                NotificationStatus  @default(PENDING)
  sentAt                DateTime?
  recipientId           Int?                // User receiving notification
  recipient             User?               @relation(fields: [recipientId], references: [id])
  message               String?             // Notification content (e.g., "Low stock alert for Paracetamol")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model InventorySupplier {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  name                  String              // Supplier name
  contactDetails        String?             // JSON or text for contact info (e.g., {"phone": "1234567890", "email": "supplier@example.com"})
  address               String?             // Supplier address
  supplierCode          String?             @unique // Unique supplier code (e.g., "SUP-001")
  createdById           Int?                // User who created the supplier record
  createdBy             User?               @relation(fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation(fields: [updatedById], references: [id])
  inventory             Inventory[]         @relation
  auditLogs             AuditLog[]          @relation("SupplierAuditLogs")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

// =========================================
// PROCUREMENT
// =========================================

// procurement.prisma
enum SupplierStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_APPROVAL
}

enum PurchaseOrderStatus {
  PENDING
  PROCESSING
  APPROVED
  DELIVERED
  CANCELLED
  PARTIALLY_DELIVERED
}

enum PurchaseOrderItemStatus {
  PENDING
  ORDERED
  DELIVERED
  BACKORDERED
  CANCELLED
}

enum ProcurementStatus {
  PENDING
  APPROVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Procurement {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  requestNumber       String                @unique // Unique procurement request number (e.g., "PR-2025-001")
  departmentId        Int?                  // Link to requesting department
  department          Department?           @relation(fields: [departmentId], references: [id])
  requesterId         Int?                  // Link to user who created the request
  requester           User?                 @relation("ProcurementRequester", fields: [requesterId], references: [id])
  status              ProcurementStatus     @default(PENDING) // Status of procurement request
  requestDate         DateTime              @default(now())   // Date of procurement request
  approvedDate        DateTime?             // Date of approval
  completionDate      DateTime?             // Date of completion
  description         String?               // Description of procurement needs
  budgetId            Int?                  // Link to budget
  budget              Budget?               @relation(fields: [budgetId], references: [id])
  purchaseOrderId     Int?                  // Link to associated purchase order
  purchaseOrder       PurchaseOrder?        @relation(fields: [purchaseOrderId], references: [id])
  medicationId        Int?                  // Link to medication (optional)
  medication          Medication?           @relation(fields: [medicationId], references: [id])
  cssdInstrumentId    Int?                  // Link to CSSD instrument (optional)
  cssdInstrument      CSSDInstrument?       @relation(fields: [cssdInstrumentId], references: [id])
  inventoryItemId     Int?                  // Link to inventory item (optional)
  inventoryItem       Inventory?            @relation(fields: [inventoryItemId], references: [id])
  billingId           Int?                  // Link to billing for procurement
  billing             Billing?              @relation(fields: [billingId], references: [id])
  notes               String?               // Additional notes
  documents           String?               // JSON or file paths for procurement documents
  createdById         Int?                  // User who created the record
  createdBy           User?                 @relation("ProcurementCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("ProcurementUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("ProcurementAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Supplier {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  name                String                // Supplier name (e.g., "MediCorp Supplies")
  status              SupplierStatus        @default(PENDING_APPROVAL)
  contactName         String?               // Primary contact person
  contactPhone        String?               // Contact phone number
  email               String?               @unique // Supplier email
  address             String?               // Physical address
  website             String?               // Supplier website
  taxId               String?               // Tax identification number
  paymentTerms        String?               // e.g., "Net 30", "COD"
  creditLimit         Float?                // Credit limit for supplier
  contractStartDate   DateTime?             // Start date of contract
  contractEndDate     DateTime?             // End date of contract
  contractDetails     String?               // JSON or text for contract terms
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  medications         Medication[]          // Medications supplied
  purchaseOrders      PurchaseOrder[]       // Purchase orders placed with supplier
  cssdInstruments     CSSDInstrument[]      // CSSD instruments supplied
  inventoryItems      Inventory[]           // Inventory items supplied
  performanceRating   Float?                // Supplier performance rating (e.g., 4.5/5)
  lastReviewDate      DateTime?             // Last supplier review date
  notes               String?               // Additional notes
  documents           String?               // JSON or file paths for supplier documents
  createdById         Int?                  // User who created supplier record
  createdBy           User?                 @relation("SupplierCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("SupplierUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("SupplierAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model PurchaseOrder {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  orderNumber         String                @unique // Unique order number (e.g., "PO-2025-001")
  supplierId          Int                   // Link to supplier
  supplier            Supplier              @relation(fields: [supplierId], references: [id])
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  procurementId       Int?                  // Link to procurement request
  procurement         Procurement?          @relation(fields: [procurementId], references: [id])
  orderDate           DateTime              @default(now())
  expectedDeliveryDate DateTime?            // Expected delivery date
  actualDeliveryDate  DateTime?             // Actual delivery date
  status              PurchaseOrderStatus   @default(PENDING)
  totalAmount         Float                 // Total order amount
  taxAmount           Float?                // Tax component
  discountAmount      Float?                // Discount applied
  shippingCost        Float?                // Shipping cost
  paymentStatus       String?               // e.g., "PAID", "PENDING", "PARTIAL"
  transactionId       Int?                  // Link to accounting transaction
  transaction         Transaction?          @relation(fields: [transactionId], references: [id])
  inventoryId         Int?                  // Link to inventory
  inventory           Inventory?            @relation(fields: [inventoryId], references: [id])
  cssdInstrumentId    Int?                  // Link to CSSD instrument
  cssdInstrument      CSSDInstrument?       @relation(fields: [cssdInstrumentId], references: [id])
  notes               String?               // Additional notes
  documents           String?               // JSON or file paths for order documents
  items               PurchaseOrderItem[]   // Items in the purchase order
  createdById         Int?                  // User who created the order
  createdBy           User?                 @relation("PurchaseOrderCreatedBy", fields: [createdById], references: [id])
  approvedById        Int?                  // User who approved the order
  approvedBy          User?                 @relation("PurchaseOrderApprovedBy", fields: [approvedById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("PurchaseOrderUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("PurchaseOrderAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model PurchaseOrderItem {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  purchaseOrderId     Int                   // Link to purchase order
  purchaseOrder       PurchaseOrder         @relation(fields: [purchaseOrderId], references: [id])
  medicationId        Int?                  // Link to medication (optional)
  medication          Medication?           @relation(fields: [medicationId], references: [id])
  cssdInstrumentId    Int?                  // Link to CSSD instrument (optional)
  cssdInstrument      CSSDInstrument?       @relation(fields: [cssdInstrumentId], references: [id])
  inventoryItemId     Int?                  // Link to inventory item (optional)
  inventoryItem       Inventory?            @relation(fields: [inventoryItemId], references: [id])
  quantity            Int                   // Ordered quantity
  unitPrice           Float                 // Price per unit
  totalPrice          Float                 // Total price for item
  batchNumber         String?               // Batch number
  expiryDate          DateTime?             // Expiry date of item
  status              PurchaseOrderItemStatus @default(PENDING)
  receivedQuantity    Int?                  // Quantity received
  receivedDate        DateTime?             // Date items were received
  notes               String?               // Additional notes
  createdById         Int?                  // User who created the item
  createdBy           User?                 @relation("PurchaseOrderItemCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("PurchaseOrderItemUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("PurchaseOrderItemAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

// =========================================
// FIXED ASSETS
// =========================================

enum AssetStatus {
  ACTIVE
  INACTIVE
  UNDER_MAINTENANCE
  DISPOSED
  LOST
}

enum DepreciationMethod {
  STRAIGHT_LINE
  REDUCING_BALANCE
  UNITS_OF_PRODUCTION
}

enum AssetType {
  EQUIPMENT
  FURNITURE
  VEHICLE
  BUILDING
  IT_ASSET
  OTHER
}

model FixedAsset {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  name                  String              // Asset name (e.g., "MRI Scanner")
  assetCode             String?             @unique // Unique identifier (e.g., "FA-001")
  description           String?             // Detailed description of asset
  assetType             AssetType           // Type of asset
  purchaseDate          DateTime            // Date of purchase
  purchaseCost          Float               // Initial cost of asset
  depreciationMethod    DepreciationMethod? // Method used for depreciation
  depreciationRate      Float?              // Annual depreciation rate (percentage)
  depreciationAmount    Float               @default(0.0) // Accumulated depreciation
  currentValue          Float               // Current book value
  status                AssetStatus         @default(ACTIVE)
  departmentId          Int?                // Link to department using the asset
  department            Department?         @relation(fields: [departmentId], references: [id])
  location              String?             // Physical location (e.g., "Radiology Lab")
  serialNumber          String?             // Manufacturer serial number
  manufacturer          String?             // Manufacturer name
  model                 String?             // Model number
  warrantyEndDate       DateTime?           // Warranty expiration date
  maintenanceSchedule   String?             // JSON for maintenance schedule (e.g., {"frequency": "ANNUAL"})
  lastMaintenanceDate   DateTime?           // Last maintenance performed
  disposalDate          DateTime?           // Date of disposal, if applicable
  disposalReason        String?             // Reason for disposal (e.g., "Obsolete")
  disposalValue         Float?              @default(0.0) // Value received on disposal
  createdById           Int?                // User who created the asset record
  createdBy             User?               @relation(fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation(fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("FixedAssetAuditLogs")
  maintenanceRecords    MaintenanceRecord[] @relation("AssetMaintenanceRecords")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model MaintenanceRecord {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  fixedAssetId          Int
  fixedAsset            FixedAsset          @relation("AssetMaintenanceRecords", fields: [fixedAssetId], references: [id])
  maintenanceDate       DateTime            @default(now())
  maintenanceType       String              // e.g., "Routine", "Repair"
  description           String?             // Details of maintenance performed
  cost                  Float?              @default(0.0) // Cost of maintenance
  performedById         Int?                // User or technician who performed maintenance
  performedBy           User?               @relation(fields: [performedById], references: [id])
  notes                 String?             // Additional notes
  createdById           Int?                // User who created the record
  createdBy             User?               @relation(fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation(fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("MaintenanceRecordAuditLogs")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

// =========================================
// DYNAMIC REPORT
// =========================================

// dynamic-reports.prisma
enum ReportStatus {
  DRAFT
  GENERATED
  SCHEDULED
  FAILED
  COMPLETED
  ARCHIVED
}

enum ReportType {
  FINANCIAL
  CLINICAL
  OPERATIONAL
  PATIENT
  INVENTORY
  COMPLIANCE
  PERFORMANCE
}

enum ReportFormat {
  PDF
  CSV
  EXCEL
  JSON
  HTML
}

enum ScheduleFrequency {
  ONCE
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
}

model Report {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  name                  String              // e.g., "Department Summary Report"
  description           String?             // General report description
  type                  ReportType          // Type of report
  status                ReportStatus        @default(DRAFT) // General status
  departmentId          Int?                // Link to department
  department            Department?         @relation(fields: [departmentId], references: [id])
  clinicalSettingId     Int?                // Link to clinical setting
  clinicalSetting       ClinicalSetting?    @relation(fields: [clinicalSettingId], references: [id])
  dynamicReportId       Int?                // Link to specific dynamic report
  dynamicReport         DynamicReport?      @relation(fields: [dynamicReportId], references: [id])
  createdById           Int?                // User who created the report
  createdBy             User?               @relation("ReportGeneralCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation("ReportGeneralUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("ReportAuditLogs")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model DynamicReport {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  reportId              Int?                // Link to parent report
  report                Report?             @relation(fields: [reportId], references: [id])
  name                  String              // e.g., "Monthly Patient Admissions"
  description           String?             // Report description
  type                  ReportType          // Type of report
  status                ReportStatus        @default(DRAFT)
  format                ReportFormat        // Output format
  query                 String              // SQL or query string for report data
  parameters            String?             // JSON for report parameters (e.g., date range, department)
  departmentId          Int?                // Link to department
  department            Department?         @relation(fields: [departmentId], references: [id])
  clinicalSettingId     Int?                // Link to clinical setting
  clinicalSetting       ClinicalSetting?    @relation(fields: [clinicalSettingId], references: [id])
  createdById           Int?                // User who created the report
  createdBy             User?               @relation("ReportCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation("ReportUpdatedBy", fields: [updatedById], references: [id])
  scheduled             Boolean             @default(false) // Is report scheduled?
  scheduleFrequency     ScheduleFrequency?  // Frequency for scheduled reports
  scheduleStartDate     DateTime?           // Start date for scheduled reports
  scheduleEndDate       DateTime?           // End date for recurring schedule
  lastGenerated         DateTime?           // Last time report was generated
  outputPath            String?             // Path to generated report file
  reportTemplateId      Int?                // Link to report template
  reportTemplate        ReportTemplate?     @relation(fields: [reportTemplateId], references: [id])
  notifications         ReportNotification[] @relation("ReportNotifications")
  auditLogs             AuditLog[]          @relation("DynamicReportAuditLogs")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model ReportTemplate {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  name                  String              // e.g., "Patient Summary Template"
  description           String?             // Template description
  type                  ReportType          // Type of report template
  templateContent       String              // JSON or HTML for template structure
  defaultParameters     String?             // JSON for default parameters
  createdById           Int?                // User who created the template
  createdBy             User?               @relation("TemplateCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation("TemplateUpdatedBy", fields: [updatedById], references: [id])
  reports               DynamicReport[]     @relation
  auditLogs             AuditLog[]          @relation("ReportTemplateAuditLogs")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model ReportNotification {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  reportId              Int
  report                DynamicReport       @relation("ReportNotifications", fields: [reportId], references: [id])
  notificationType      String              // e.g., "SMS", "Email", "App Push"
  status                String              @default("PENDING") // PENDING, SENT, FAILED, READ
  sentAt                DateTime?
  recipientId           Int?                // User receiving notification
  recipient             User?               @relation(fields: [recipientId], references: [id])
  message               String?             // Notification content
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

// =========================================
// MEDICAL RECORDS
// =========================================

// medical-records.prisma
enum MedicalRecordStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  PENDING_REVIEW
  COMPLETED
}

enum MedicalRecordType {
  CONSULTATION
  HOSPITALIZATION
  SURGICAL
  DIAGNOSTIC
  FOLLOW_UP
  EMERGENCY
}

model MedicalRecord {
  id                   Int                   @id @default(autoincrement())
  uuid                 String                @unique @default(uuid())
  recordId             String                @unique // Unique identifier (e.g., "MR-2025-001")
  patientId            Int                   // Link to patient
  patient              Patient               @relation("PatientMedicalRecords", fields: [patientId], references: [id])
  doctorId             Int?                  // Link to primary doctor
  doctor               Doctor?               @relation("DoctorMedicalRecords", fields: [doctorId], references: [id])
  appointmentId        Int?                  // Link to appointment
  appointment          Appointment?          @relation(fields: [appointmentId], references: [id])
  admissionId          Int?                  // Link to admission
  admission            Admission?            @relation(fields: [admissionId], references: [id])
  dischargeId          Int?                  // Link to discharge
  discharge            Discharge?            @relation(fields: [dischargeId], references: [id])
  clinicalRecordId     Int?                  // Link to clinical record
  clinicalRecord       ClinicalRecord?       @relation(fields: [clinicalRecordId], references: [id])
  departmentId         Int?                  // Link to department
  department           Department?           @relation(fields: [departmentId], references: [id])
  clinicalSettingId    Int?                  // Link to clinical setting
  clinicalSetting      ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  type                 MedicalRecordType     // Type of record
  status               MedicalRecordStatus   @default(DRAFT)
  diagnosis            String?               // Primary diagnosis
  presentingComplaint  String?               // Chief complaint
  familyHistory        String?               // Family medical history
  socialHistory        String?               // Social history (e.g., smoking, alcohol)
  pastMedicalHistory   String?               // Past medical history
  allergies            String?               // Known allergies
  medications          String?               // Current medications
  vitals               String?               // JSON or text for vitals (e.g., {"bp": "120/80", "pulse": 72})
  labResults           String?               // JSON or text for lab results summary
  radiologyResults     String?               // JSON or text for radiology results summary
  treatmentPlan        String?               // Treatment plan details
  progressNotes        String?               // Ongoing clinical notes
  documents            String?               // JSON or file paths for attached documents (e.g., PDFs, images)
  date                 DateTime              // Date of record creation/update
  laboratoryId         Int?                  // Link to lab tests
  laboratory           Laboratory?           @relation(fields: [laboratoryId], references: [id])
  radiologyId          Int?                  // Link to radiology tests
  radiology            Radiology?            @relation(fields: [radiologyId], references: [id])
  pharmacyId           Int?                  // Link to prescriptions
  pharmacy             Pharmacy?             @relation(fields: [pharmacyId], references: [id])
  operationTheatreId   Int?                  // Link to surgical procedures
  operationTheatre     OperationTheatre?     @relation(fields: [operationTheatreId], references: [id])
  nursingId            Int?                  // Link to nursing care
  nursing              Nursing?              @relation(fields: [nursingId], references: [id])
  maternityId          Int?                  // Link to maternity care
  maternity            Maternity?            @relation(fields: [maternityId], references: [id])
  vaccinationId        Int?                  // Link to vaccinations
  vaccination          Vaccination?          @relation(fields: [vaccinationId], references: [id])
  billingId            Int?                  // Link to billing for services
  billing              Billing?              @relation(fields: [billingId], references: [id])
  claimId              Int?                  // Link to insurance claim
  claim                Claim?                @relation(fields: [claimId], references: [id])
  nhifClaimId          Int?                  // Link to NHIF claim
  nhifClaim            NhifClaim?            @relation(fields: [nhifClaimId], references: [id])
  icd10Codes           String?               // JSON or text for ICD-10 diagnosis codes
  confidentialityLevel  String?               // e.g., "STANDARD", "RESTRICTED"
  createdById          Int?                  // User who created the record
  createdBy            User?                 @relation("MedicalRecordCreatedBy", fields: [createdById], references: [id])
  updatedById          Int?                  // User who last updated
  updatedBy            User?                 @relation("MedicalRecordUpdatedBy", fields: [updatedById], references: [id])
  reviewedById         Int?                  // User who reviewed the record
  reviewedBy           User?                 @relation("MedicalRecordReviewedBy", fields: [reviewedById], references: [id])
  auditLogs            AuditLog[]            @relation("MedicalRecordAuditLogs")
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

// =========================================
// HELPDESK
// =========================================

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  ESCALATED
  ON_HOLD
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TicketCategory {
  TECHNICAL
  CLINICAL
  ADMINISTRATIVE
  BILLING
  FACILITY
  OTHER
}



model Helpdesk {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  ticketNumber          String              @unique // e.g., "HD-2025-001"
  title                 String              // Brief summary of issue
  description           String              // Detailed description of issue
  category              TicketCategory      // Type of issue
  priority              TicketPriority      @default(MEDIUM)
  status                TicketStatus        @default(OPEN)
  reportedById          Int?                // User who reported the issue
  reportedBy            User?               @relation("ReportedBy", fields: [reportedById], references: [id])
  assignedToId          Int?                // User assigned to resolve the issue
  assignedTo            User?               @relation("AssignedTo", fields: [assignedToId], references: [id])
  doctorId              Int?                // Link to doctor if related
  doctor                Doctor?             @relation("DoctorHelpdeskTickets", fields: [doctorId], references: [id])
  departmentId          Int?                // Link to department
  department            Department?         @relation(fields: [departmentId], references: [id])
  clinicalSettingId     Int?                // Link to clinical setting
  clinicalSetting       ClinicalSetting?    @relation(fields: [clinicalSettingId], references: [id])
  patientId             Int?                // Link to patient if related
  patient               Patient?            @relation(fields: [patientId], references: [id])
  admissionId           Int?                // Link to admission if related
  admission             Admission?          @relation(fields: [admissionId], references: [id])
  appointmentId         Int?                // Link to appointment if related
  appointment           Appointment?        @relation(fields: [appointmentId], references: [id])
  invoiceId             Int?                // Link to invoice if billing-related
  invoice               Invoice?            @relation(fields: [invoiceId], references: [id])
  fixedAssetId          Int?                // Link to fixed asset if related
  fixedAsset            FixedAsset?         @relation(fields: [fixedAssetId], references: [id])
  createdDate           DateTime            @default(now())
  resolvedDate          DateTime?           // Date issue was resolved
  dueDate               DateTime?           // Expected resolution date
  resolutionNotes       String?             // Notes on resolution
  escalationReason      String?             // Reason for escalation, if applicable
  createdById           Int?                // User who created the ticket
  createdBy             User?               @relation("HelpdeskCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation("HelpdeskUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("HelpdeskAuditLogs")
  ticketComments        TicketComment[]     @relation("TicketComments")
  ticketAttachments     TicketAttachment[]  @relation("TicketAttachments")
  ticketNotifications   TicketNotification[] @relation("TicketNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model TicketComment {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  helpdeskId            Int
  helpdesk              Helpdesk            @relation("TicketComments", fields: [helpdeskId], references: [id])
  comment               String              // Comment text
  createdById           Int?                // User who added the comment
  createdBy             User?               @relation(fields: [createdById], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  auditLogs             AuditLog[]          @relation("TicketCommentAuditLogs")
}

model TicketAttachment {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  helpdeskId            Int
  helpdesk              Helpdesk            @relation("TicketAttachments", fields: [helpdeskId], references: [id])
  filePath              String              // Path to stored attachment
  fileName              String              // Original file name
  fileType              String              // e.g., "PDF", "Image"
  uploadedById          Int?                // User who uploaded the attachment
  uploadedBy            User?               @relation(fields: [uploadedById], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  auditLogs             AuditLog[]          @relation("TicketAttachmentAuditLogs")
}

model TicketNotification {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  helpdeskId            Int
  helpdesk              Helpdesk            @relation("TicketNotifications", fields: [helpdeskId], references: [id])
  notificationType      String              // e.g., "SMS", "Email", "App Push"
  status                NotificationStatus  @default(PENDING)
  sentAt                DateTime?
  recipientId           Int?                // User receiving notification
  recipient             User?               @relation(fields: [recipientId], references: [id])
  message               String?             // Notification content
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

// =========================================
// MKT REFERRAL
// =========================================

// marketing-referral.prisma
enum ReferralType {
  PATIENT_TO_PATIENT
  DOCTOR_TO_DOCTOR
  STAFF_TO_PATIENT
  EXTERNAL_PARTNER
}

enum ReferralStatus {
  PENDING
  ACCEPTED
  COMPLETED
  REJECTED
  EXPIRED
}

enum RewardType {
  DISCOUNT
  GIFT_CARD
  CASH
  RAFFLE_ENTRY
  FREE_CONSULTATION
  SERVICE_CREDIT
}

model ReferralProgram {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  name                String                // e.g., "Patient Referral Incentive Program"
  description         String?               // Program description
  type                ReferralType          // PATIENT_TO_PATIENT, DOCTOR_TO_DOCTOR, etc.
  status              String                @default("ACTIVE") // ACTIVE, INACTIVE, DRAFT
  startDate           DateTime              @default(now())
  endDate             DateTime?             // Optional end date for program
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  targetAudience      String?               // e.g., "Patients", "Primary Care Physicians"
  rewardType          RewardType?           // Type of reward offered
  rewardValue         Float?                // Value of reward (e.g., $50 gift card)
  rewardDescription    String?               // Details of reward
  eligibilityCriteria  String?               // JSON or text for eligibility (e.g., {"min_visits": 1})
  maxReferrals        Int?                  // Max referrals per participant
  termsConditions     String?               // Terms and conditions of program
  createdById         Int?                  // User who created the program
  createdBy           User?                 @relation("ReferralProgramCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("ReferralProgramUpdatedBy", fields: [updatedById], references: [id])
  referrals           Referral[]            // Referrals under this program
  campaigns           MarketingCampaign[]   // Marketing campaigns linked to program
  auditLogs           AuditLog[]            @relation("ReferralProgramAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Referral {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  referralProgramId   Int                   // Link to referral program
  referralProgram     ReferralProgram       @relation(fields: [referralProgramId], references: [id])
  referrerId          Int?                  // User or patient who made the referral
  referrer            User?                 @relation("Referrer", fields: [referrerId], references: [id])
  refereeId           Int?                  // User or patient being referred
  referee             User?                 @relation("Referee", fields: [refereeId], references: [id])
  patientId           Int?                  // Link to patient (if applicable)
  patient             Patient?              @relation(fields: [patientId], references: [id])
  doctorId            Int?                  // Link to doctor (for doctor-to-doctor referrals)
  doctor              Doctor?               @relation(fields: [doctorId], references: [id])
  departmentId        Int?                  // Link to target department
  department          Department?           @relation(fields: [departmentId], references: [id])
  status              ReferralStatus        @default("PENDING")
  referralDate        DateTime              @default(now())
  completionDate      DateTime?             // Date referral was completed
  appointmentId       Int?                  // Link to appointment created from referral
  appointment         Appointment?          @relation(fields: [appointmentId], references: [id])
  medicalRecordId     Int?                  // Link to medical record
  medicalRecord       MedicalRecord?        @relation(fields: [medicalRecordId], references: [id])
  claimId             Int?                  // Link to insurance claim
  claim               Claim?                @relation(fields: [claimId], references: [id])
  nhifClaimId         Int?                  // Link to NHIF claim
  nhifClaim           NhifClaim?            @relation(fields: [nhifClaimId], references: [id])
  rewardId            Int?                  // Link to reward issued
  reward              ReferralReward?       @relation(fields: [rewardId], references: [id])
  notes               String?               // Additional notes
  referralCode        String?               @unique // Unique code for tracking
  source              String?               // Source of referral (e.g., "Email", "Social Media")
  campaignId          Int?                  // Link to marketing campaign
  campaign            MarketingCampaign?    @relation(fields: [campaignId], references: [id])
  createdById         Int?                  // User who created referral
  createdBy           User?                 @relation("ReferralCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("ReferralUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("ReferralAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model ReferralReward {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  referralId          Int                   // Link to referral
  referral            Referral              @relation(fields: [referralId], references: [id])
  rewardType          RewardType            // DISCOUNT, GIFT_CARD, etc.
  rewardValue         Float                 // Value of reward
  issuedDate          DateTime              @default(now())
  expiryDate          DateTime?             // Expiry date of reward
  redeemedDate        DateTime?             // Date reward was redeemed
  redeemedById        Int?                  // User who redeemed reward
  redeemedBy          User?                 @relation("RewardRedeemedBy", fields: [redeemedById], references: [id])
  status              String                @default("PENDING") // PENDING, ISSUED, REDEEMED, EXPIRED
  transactionId       Int?                  // Link to accounting transaction
  transaction         Transaction?          @relation(fields: [transactionId], references: [id])
  notes               String?               // Notes about reward
  createdById         Int?                  // User who issued reward
  createdBy           User?                 @relation("RewardCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("RewardUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("ReferralRewardAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model MarketingCampaign {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  name                String                // e.g., "Spring Referral Drive"
  description         String?               // Campaign description
  referralProgramId   Int?                  // Link to referral program
  referralProgram     ReferralProgram?      @relation(fields: [referralProgramId], references: [id])
  startDate           DateTime              @default(now())
  endDate             DateTime?             // Optional end date
  targetAudience      String?               // e.g., "General Practitioners", "Patients"
  channel             String?               // e.g., "Email", "Social Media", "Direct Mail"
  budget              Float?                // Campaign budget
  actualCost          Float?                // Actual cost incurred
  kpis                String?               // JSON or text for key performance indicators
  status              String                @default("DRAFT") // DRAFT, ACTIVE, COMPLETED, CANCELLED
  referrals           Referral[]            // Referrals generated by campaign
  createdById         Int?                  // User who created campaign
  createdBy           User?                 @relation("CampaignCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("CampaignUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("MarketingCampaignAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

// =========================================
// SOCIAL SERVICE
// =========================================

// social-service.prisma
enum SocialServiceCaseStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  PENDING
  REFERRED
}

enum SocialServiceType {
  COUNSELING
  FINANCIAL_AID
  HOUSING_ASSISTANCE
  LEGAL_AID
  PSYCHOSOCIAL_SUPPORT
  CHILD_PROTECTION
  ELDER_CARE
}

enum SocialServicePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SocialServiceStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

model SocialService {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  patientId           Int?                  // Link to patient
  patient             Patient?              @relation(fields: [patientId], references: [id])
  dischargeId         Int?                  // Link to discharge
  discharge           Discharge?            @relation(fields: [dischargeId], references: [id])
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  clinicalSettingId   Int?                  // Link to clinical setting
  clinicalSetting     ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  socialWorkerId      Int?                  // Link to social worker
  socialWorker        User?                 @relation("SocialServiceWorker", fields: [socialWorkerId], references: [id])
  status              SocialServiceStatus   @default(PENDING) // Status of social service
  serviceType         SocialServiceType?    // Type of social service
  startDate           DateTime              @default(now())   // Start date of social service
  endDate             DateTime?             // End date of social service
  notes               String?               // General notes
  socialServiceCases  SocialServiceCase[]   // Specific cases linked to this service
  billingId           Int?                  // Link to billing for social services
  billing             Billing?              @relation(fields: [billingId], references: [id])
  createdById         Int?                  // User who created the record
  createdBy           User?                 @relation("SocialServiceCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("SocialServiceUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("SocialServiceAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model SocialServiceCase {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  caseNumber          String                @unique // Unique case ID (e.g., "SSC-2025-001")
  patientId           Int?                  // Link to patient
  patient             Patient?              @relation(fields: [patientId], references: [id])
  socialServiceId     Int?                  // Link to parent social service
  socialService       SocialService?        @relation(fields: [socialServiceId], references: [id])
  socialWorkerId      Int?                  // Link to social worker
  socialWorker        User?                 @relation("SocialWorker", fields: [socialWorkerId], references: [id])
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  clinicalSettingId   Int?                  // Link to clinical setting
  clinicalSetting     ClinicalSetting?      @relation(fields: [clinicalSettingId], references: [id])
  type                SocialServiceType     // Type of social service
  status              SocialServiceCaseStatus @default(OPEN)
  priority            SocialServicePriority @default(MEDIUM)
  openDate            DateTime              @default(now()) // Case open date
  closeDate           DateTime?             // Case close date
  description         String?               // Case description
  assessment          String?               // Initial assessment details
  interventionPlan    String?               // Plan for intervention
  progressNotes       String?               // Ongoing case notes
  referralId          Int?                  // Link to referral
  referral            Referral?             @relation(fields: [referralId], references: [id])
  medicalRecordId     Int?                  // Link to medical record
  medicalRecord       MedicalRecord?        @relation(fields: [medicalRecordId], references: [id])
  billingId           Int?                  // Link to billing for services
  billing             Billing?              @relation(fields: [billingId], references: [id])
  claimId             Int?                  // Link to insurance claim
  claim               Claim?                @relation(fields: [claimId], references: [id])
  nhifClaimId         Int?                  // Link to NHIF claim
  nhifClaim           NhifClaim?            @relation(fields: [nhifClaimId], references: [id])
  externalAgencyId    Int?                  // Link to external agency
  externalAgency      ExternalAgency?       @relation(fields: [externalAgencyId], references: [id])
  documents           String?               // JSON or file paths for case documents
  followUpSchedule    String?               // JSON or text for follow-up schedule
  outcome             String?               // Case outcome summary
  createdById         Int?                  // User who created the case
  createdBy           User?                 @relation("CaseCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("CaseUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("SocialServiceCaseAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model ExternalAgency {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  name                String                // Agency name (e.g., "Child Welfare Services")
  contactName         String?               // Primary contact person
  contactPhone        String?               // Contact phone number
  email               String?               @unique // Agency email
  address             String?               // Physical address
  servicesProvided    String?               // JSON or text for services offered
  status              String                @default("ACTIVE") // ACTIVE, INACTIVE
  contractStartDate   DateTime?             // Start date of partnership
  contractEndDate     DateTime?             // End date of partnership
  notes               String?               // Additional notes
  documents           String?               // JSON or file paths for agency documents
  socialServiceCases  SocialServiceCase[]   // Cases referred to this agency
  createdById         Int?                  // User who created agency record
  createdBy           User?                 @relation("AgencyCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("AgencyUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("ExternalAgencyAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

// =========================================
// SYSTEM ADMIN
// =========================================

// system-admin.prisma
enum UserRole {
  ADMIN
  DOCTOR
  NURSE
  PHARMACIST
  RADIOLOGIST
  SOCIAL_WORKER
  PATIENT
  BILLING_OFFICER
  RECEPTIONIST
  LAB_TECHNICIAN
  IT_SUPPORT
}

enum PermissionLevel {
  FULL_ACCESS
  READ_ONLY
  WRITE
  RESTRICTED
}

enum SystemLogType {
  LOGIN
  LOGOUT
  DATA_MODIFICATION
  ERROR
  SECURITY
  SYSTEM_EVENT
}

model User {
  id                    Int                   @id @default(autoincrement())
  uuid                  String                @unique @default(uuid())
  email                 String                @unique // User email
  name                  String                // Full name
  password              String                // Hashed password
  role                  UserRole              @default("PATIENT") // User role
  status                String                @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED
  departmentId          Int?                  // Link to department
  department            Department?           @relation(fields: [departmentId], references: [id])
  phone                 String?               // Contact number
  address               String?               // Physical address
  profileImage          String?               // Path to profile image
  lastLogin             DateTime?             // Last login timestamp
  loginAttempts         Int                   @default(0) // Failed login attempts
  accountLocked         Boolean               @default(false) // Account lock status
  permissions           String?               // JSON or text for specific permissions
  createdById           Int?                  // User who created this user
  createdBy             User?                 @relation("UserCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                  // User who last updated
  updatedBy             User?                 @relation("UserUpdatedBy", fields: [updatedById], references: [id])
  payrolls              Payroll[]             // Payroll records for staff
  cssdLogs              CSSDLog[]             @relation("LoggedBy")
  cssdRequisitions      CSSDRequisition[]     @relation("RequisitionRequestedBy")
  appointments          Appointment[]         @relation("BookedBy")
  dispensingRecords     DispensingRecord[]    @relation("DispensedBy")
  refunds               Refund[]              @relation("ProcessedBy")
  stockAdjustments      StockAdjustment[]     @relation("AdjustedBy")
  socialServiceCases    SocialServiceCase[]   @relation("SocialWorker")
  radiologyTests        RadiologyTest[]       @relation("Radiologist")
  nursingCare           NursingCare[]         @relation("NurseAssigned")
  nursingTasks          NursingTask[]         @relation("TaskAssignedNurse")
  nursingShifts         NursingShift[]        @relation("ShiftNurse")
  surgicalStaff         SurgicalStaff[]       @relation("SurgicalStaff")
  systemLogs            SystemLog[]           @relation("LoggedBy")
  auditLogs             AuditLog[]            @relation("PerformedBy")
  patientRecords        Patient[]             @relation("PatientUser")
  doctorRecords         Doctor[]              @relation("DoctorUser")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model SystemConfiguration {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  key                 String                @unique // e.g., "SYSTEM_TIMEZONE"
  value               String                // Configuration value
  description         String?               // Description of config
  category            String?               // e.g., "General", "Security", "Notification"
  status              String                @default("ACTIVE") // ACTIVE, INACTIVE
  createdById         Int?                  // User who created config
  createdBy           User?                 @relation("ConfigCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("ConfigUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("SystemConfigAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model SystemLog {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  userId              Int?                  // Link to user
  user                User?                 @relation("LoggedBy", fields: [userId], references: [id])
  type                SystemLogType         // Type of log
  description         String                // Log details
  ipAddress           String?               // IP address of action
  deviceInfo          String?               // JSON or text for device details
  module              String?               // e.g., "Patient", "Billing"
  action              String                // e.g., "CREATE", "UPDATE", "DELETE"
  entityId            Int?                  // ID of affected entity
  entityType          String?               // Type of entity (e.g., "Patient", "Appointment")
  createdAt           DateTime              @default(now())
}

model RolePermission {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  role                UserRole              // Role to which permission applies
  module              String                // e.g., "Patient", "Billing"
  permissionLevel     PermissionLevel       // FULL_ACCESS, READ_ONLY, etc.
  description         String?               // Permission description
  createdById         Int?                  // User who created permission
  createdBy           User?                 @relation("PermissionCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("PermissionUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("RolePermissionAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}


model AuditLog {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid())
  action      String    // e.g., "CREATE", "UPDATE", "DELETE"
  entity      String    // e.g., "Appointment", "Supplier"
  entityId    Int       // ID of the entity being logged
  userId      Int?      // User who performed the action
  user        User?     @relation(fields: [userId], references: [id])
  details     String?   // JSON or text with action details
  createdAt   DateTime  @default(now())
}

// =========================================
// UTILITIES
// =========================================

// utilities.prisma
enum UtilityType {
  ELECTRICITY
  WATER
  GAS
  INTERNET
  WASTE_DISPOSAL
  HVAC_MAINTENANCE
  MEDICAL_GAS
}

enum UtilityStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  DISRUPTED
}

enum BillingCycle {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUAL
}

model Utility {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  name                String                // e.g., "Main Hospital Electricity"
  type                UtilityType           // Type of utility
  status              UtilityStatus         @default(ACTIVE)
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  location            String?               // e.g., "Building A, Main Grid"
  providerId          Int?                  // Link to utility provider
  provider            UtilityProvider?      @relation(fields: [providerId], references: [id])
  meterNumber         String?               @unique // Unique meter or account number
  capacity            Float?                // e.g., 500 kW for electricity
  unitOfMeasure       String?               // e.g., "kWh", "Cubic Meters"
  billingCycle        BillingCycle?         // Billing frequency
  lastReading         Float?                // Last meter reading
  lastReadingDate     DateTime?             // Date of last reading
  currentReading      Float?                // Current meter reading
  currentReadingDate  DateTime?             // Date of current reading
  consumption         Float?                // Calculated consumption
  costPerUnit         Float?                // Cost per unit (e.g., $0.15/kWh)
  totalCost           Float?                // Total cost for period
  contractStartDate   DateTime?             // Start date of contract
  contractEndDate     DateTime?             // End date of contract
  maintenanceSchedule String?               // JSON or text for maintenance schedule
  lastMaintenance     DateTime?             // Date of last maintenance
  notes               String?               // Additional notes
  documents           String?               // JSON or file paths for utility documents
  transactionId       Int?                  // Link to accounting transaction
  transaction         Transaction?          @relation(fields: [transactionId], references: [id])
  billingId           Int?                  // Link to billing
  billing             Billing?              @relation(fields: [billingId], references: [id])
  createdById         Int?                  // User who created utility record
  createdBy           User?                 @relation("UtilityCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("UtilityUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("UtilityAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model UtilityProvider {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  name                String                // e.g., "National Power Company"
  contactName         String?               // Primary contact person
  contactPhone        String?               // Contact phone number
  email               String?               @unique // Provider email
  address             String?               // Physical address
  website             String?               // Provider website
  accountNumber       String?               // Account number with provider
  paymentTerms        String?               // e.g., "Net 30"
  contractDetails     String?               // JSON or text for contract terms
  status              String                @default(ACTIVE) // ACTIVE, INACTIVE
  utilities           Utility[]             // Utilities provided by this provider
  documents           String?               // JSON or file paths for provider documents
  createdById         Int?                  // User who created provider record
  createdBy           User?                 @relation("ProviderCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("ProviderUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("UtilityProviderAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model UtilityMaintenance {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  utilityId           Int                   // Link to utility
  utility             Utility               @relation(fields: [utilityId], references: [id])
  maintenanceDate     DateTime              @default(now())
  maintenanceType     String                // e.g., "Routine", "Emergency"
  description         String?               // Maintenance details
  performedById       Int?                  // User or technician who performed maintenance
  performedBy         User?                 @relation("MaintenancePerformedBy", fields: [performedById], references: [id])
  cost                Float?                // Cost of maintenance
  status              String                @default(PENDING) // PENDING, COMPLETED, FAILED
  downtimeDuration    Int?                  // Downtime in minutes
  procurementId       Int?                  // Link to procurement for parts
  procurement         Procurement?          @relation(fields: [procurementId], references: [id])
  documents           String?               // JSON or file paths for maintenance documents
  notes               String?               // Additional notes
  createdById         Int?                  // User who created maintenance record
  createdBy           User?                 @relation("MaintenanceCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("MaintenanceUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("UtilityMaintenanceAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

// =========================================
// VERIFICATION
// =========================================

// verification.prisma
enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
  IN_PROGRESS
}

enum VerificationType {
  EMAIL
  PHONE
  IDENTITY
  INSURANCE
  MEDICAL_LICENSE
  EMPLOYMENT
  ADDRESS
}

enum VerificationMethod {
  OTP
  DOCUMENT_UPLOAD
  THIRD_PARTY_API
  MANUAL_REVIEW
  BIOMETRIC
}

model Verification {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  verificationNumber  String                @unique // Unique verification ID (e.g., "VER-2025-001")
  userId              Int?                  // Link to user being verified
  user                User?                 @relation("VerifiedUser", fields: [userId], references: [id])
  patientId           Int?                  // Link to patient
  patient             Patient?              @relation(fields: [patientId], references: [id])
  doctorId            Int?                  // Link to doctor
  doctor              Doctor?               @relation(fields: [doctorId], references: [id])
  type                VerificationType      // Type of verification
  status              VerificationStatus    @default(PENDING)
  method              VerificationMethod    // Method used for verification
  requestDate         DateTime              @default(now()) // Date verification was requested
  verificationDate    DateTime?             // Date verification was completed
  expiryDate          DateTime?             // Expiry date for verification (e.g., for OTP)
  token               String?               // OTP or token for verification
  documentPath        String?               // JSON or file paths for uploaded documents
  documentType        String?               // e.g., "Passport", "Driver's License", "Medical License"
  thirdPartyReference String?               // Reference ID from third-party API
  rejectionReason     String?               // Reason for rejection, if applicable
  notes               String?               // Additional notes
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  verifiedById        Int?                  // User who performed verification
  verifiedBy          User?                 @relation("VerifiedBy", fields: [verifiedById], references: [id])
  auditLogs           AuditLog[]            @relation("VerificationAuditLogs")
  createdById         Int?                  // User who initiated verification
  createdBy           User?                 @relation("VerificationCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("VerificationUpdatedBy", fields: [updatedById], references: [id])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model VerificationConfiguration {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  type                VerificationType      // Type of verification this config applies to
  method              VerificationMethod    // Default verification method
  maxAttempts         Int                   @default(3) // Max verification attempts
  tokenExpiryMinutes  Int                   @default(10) // Token/OTP expiry time in minutes
  requiredDocuments   String?               // JSON or text for required document types
  thirdPartyApi       String?               // API provider for third-party verification
  apiCredentials      String?               // Encrypted JSON for API credentials
  autoVerify          Boolean               @default(false) // Auto-verify if possible
  notificationSettings String?               // JSON for notification settings (e.g., SMS, email)
  status              String                @default(ACTIVE) // ACTIVE, INACTIVE
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  notes               String?               // Additional notes
  createdById         Int?                  // User who created configuration
  createdBy           User?                 @relation("ConfigCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("ConfigUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("VerificationConfigAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

// =========================================
// HOME
// =========================================

enum HomeCareStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum HomeCareServiceType {
  NURSING
  PHYSIOTHERAPY
  OCCUPATIONAL_THERAPY
  MEDICAL_CHECKUP
  PALLIATIVE_CARE
  OTHER
}


model HomeCare {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  patientId             Int
  patient               Patient             @relation(fields: [patientId], references: [id])
  doctorId              Int?                // Link to assigned doctor
  doctor                Doctor?             @relation("DoctorHomeCare", fields: [doctorId], references: [id])
  nurseId               Int?                // Link to assigned nurse
  nurse                 User?               @relation("NurseHomeCare", fields: [nurseId], references: [id])
  departmentId          Int?                // Link to department
  department            Department?         @relation(fields: [departmentId], references: [id])
  clinicalSettingId     Int?                // Link to clinical setting
  clinicalSetting       ClinicalSetting?    @relation(fields: [clinicalSettingId], references: [id])
  serviceType           HomeCareServiceType // Type of home care service
  status                HomeCareStatus      @default(SCHEDULED)
  startDate             DateTime            // Start date of home care service
  endDate               DateTime?           // End date of home care service
  frequency             String?             // JSON or text for visit frequency (e.g., {"type": "WEEKLY", "days": ["MON", "WED"]})
  address               String              // Patient's home address for service
  carePlan              String?             // JSON or text for care plan details
  notes                 String?             // Additional notes for home care
  billingId             Int?                // Link to billing for home care services
  billing               Billing?            @relation(fields: [billingId], references: [id])
  claimId               Int?                // Link to insurance claim
  claim                 Claim?              @relation(fields: [claimId], references: [id])
  pharmacyId            Int?                // Link to prescriptions
  pharmacy              Pharmacy?           @relation(fields: [pharmacyId], references: [id])
  laboratoryId          Int?                // Link to lab tests ordered
  laboratory            Laboratory?         @relation(fields: [laboratoryId], references: [id])
  radiologyId           Int?                // Link to radiology tests ordered
  radiology             Radiology?          @relation(fields: [radiologyId], references: [id])
  appointmentId         Int?                // Link to related appointment
  appointment           Appointment?        @relation(fields: [appointmentId], references: [id])
  createdById           Int?                // User who created the home care record
  createdBy             User?               @relation("HomeCareCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation("HomeCareUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("HomeCareAuditLogs")
  homeCareVisits        HomeCareVisit[]     @relation("HomeCareVisits")
  homeCareNotifications HomeCareNotification[] @relation("HomeCareNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model HomeCareVisit {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  homeCareId            Int
  homeCare              HomeCare            @relation("HomeCareVisits", fields: [homeCareId], references: [id])
  visitDate             DateTime            // Date and time of visit
  caregiverId           Int?                // User performing the visit
  caregiver             User?               @relation(fields: [caregiverId], references: [id])
  status                String              @default("SCHEDULED") // SCHEDULED, COMPLETED, CANCELLED
  visitNotes            String?             // Notes from the visit
  vitals                String?             // JSON for vital signs (e.g., {"bp": "120/80", "pulse": 72})
  clinicalRecordId      Int?                // Link to clinical record
  clinicalRecord        ClinicalRecord?     @relation(fields: [clinicalRecordId], references: [id])
  createdById           Int?                // User who created the visit record
  createdBy             User?               @relation(fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation(fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("HomeCareVisitAuditLogs")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model HomeCareNotification {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  homeCareId            Int
  homeCare              HomeCare            @relation("HomeCareNotifications", fields: [homeCareId], references: [id])
  notificationType      String              // e.g., "SMS", "Email", "App Push"
  status                NotificationStatus  @default(PENDING)
  sentAt                DateTime?
  recipientId           Int?                // User or patient receiving notification
  recipient             User?               @relation(fields: [recipientId], references: [id])
  message               String?             // Notification content
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}
