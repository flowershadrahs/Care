enum InvoiceStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  OVERDUE
  REFUNDED
  CANCELLED
  VOID
  DISPUTED
}



enum BillingItemType {
  SERVICE
  MEDICATION
  LAB_TEST
  RADIOLOGY
  PROCEDURE
  ROOM_CHARGE
  CONSULTATION
  EQUIPMENT
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  PROCESSING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  PARTIAL
  REVERSED
}

model Billing {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  patientId             Int?                // Link to patient
  patient               Patient?            @relation(fields: [patientId], references: [id])
  appointmentId         Int?                // Link to appointment
  appointment           Appointment?        @relation(fields: [appointmentId], references: [id])
  totalAmount           Float               // Total billing amount
  taxAmount             Float?              @default(0.0)
  discountAmount        Float?              @default(0.0)
  status                InvoiceStatus       @default(PENDING) // Using existing InvoiceStatus enum
  paymentMethod         PaymentMethod?      // Using centralized PaymentMethod enum
  invoiceNumber         String              @unique // Unique identifier for billing record
  issuedDate            DateTime            @default(now())
  dueDate               DateTime?
  createdById           Int?                // User who created the billing record
  createdBy             User?               @relation("BillingCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation("BillingUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("BillingAuditLogs")
  notifications         BillingNotification[] @relation("BillingNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Invoice {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  patientId             Int
  patient               Patient             @relation(fields: [patientId], references: [id])
  prescriptionId        Int?
  prescription          Prescription?       @relation(fields: [prescriptionId], references: [id])
  appointmentId         Int?
  appointment           Appointment?        @relation(fields: [appointmentId], references: [id])
  admissionId           Int?
  admission             Admission?          @relation(fields: [admissionId], references: [id])
  laboratoryId          Int?
  laboratory            Laboratory?         @relation(fields: [laboratoryId], references: [id])
  radiologyId           Int?
  radiology             Radiology?          @relation(fields: [radiologyId], references: [id])
  pharmacyId            Int?
  pharmacy              Pharmacy?           @relation(fields: [pharmacyId], references: [id])
  operationTheatreId    Int?
  operationTheatre      OperationTheatre?   @relation(fields: [operationTheatreId], references: [id])
  totalAmount           Float
  taxAmount             Float?              @default(0.0)
  discountAmount        Float?              @default(0.0)
  status                InvoiceStatus       @default(PENDING)
  paymentMethod         PaymentMethod?
  transactionId         Int?
  transaction           Transaction?        @relation("TransactionInvoices", fields: [transactionId], references: [id])
  claimId               Int?
  claim                 Claim?              @relation(fields: [claimId], references: [id])
  nhifClaimId           Int?
  nhifClaim             NhifClaim?          @relation(fields: [nhifClaimId], references: [id])
  departmentId          Int?
  department            Department?         @relation(fields: [departmentId], references: [id])
  invoiceNumber         String              @unique
  dueDate               DateTime?
  issuedDate            DateTime            @default(now())
  dispensingRecords     DispensingRecord[]
  refunds               Refund[]
  billingItems          BillingItem[]       @relation("InvoiceBillingItems")
  costCenterId          Int?
  costCenter            CostCenter?         @relation(fields: [costCenterId], references: [id])
  insuranceId           Int?
  insurance             Insurance?          @relation(fields: [insuranceId], references: [id])
  paymentTerms          String?             // e.g., "Net 30", "Due on Receipt"
  notes                 String?
  createdById           Int?
  createdBy             User?               @relation("InvoiceCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?
  updatedBy             User?               @relation("InvoiceUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("InvoiceAuditLogs")
  paymentPlans          PaymentPlan[]       @relation("InvoicePaymentPlans")
  invoiceDocuments      InvoiceDocument[]   @relation("InvoiceDocuments")
  notifications         BillingNotification[] @relation("InvoiceNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model BillingItem {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  invoiceId             Int
  invoice               Invoice             @relation("InvoiceBillingItems", fields: [invoiceId], references: [id])
  itemType              BillingItemType     // SERVICE, MEDICATION, LAB_TEST, etc.
  description           String
  quantity              Int                 @default(1)
  unitPrice             Float
  totalPrice            Float
  taxAmount             Float?              @default(0.0)
  discountAmount        Float?              @default(0.0)
  serviceId             Int?                // Link to specific service (e.g., consultation, procedure)
  service               Service?            @relation(fields: [serviceId], references: [id])
  medicationId          Int?                // Link to medication
  medication            Medication?         @relation(fields: [medicationId], references: [id])
  taxCategoryId         Int?                // Link to tax category
  taxCategory           TaxCategory?        @relation(fields: [taxCategoryId], references: [id])
  createdById           Int?                // User who added item
  createdBy             User?               @relation(fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated item
  updatedBy             User?               @relation(fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("BillingItemAuditLogs")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Refund {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  invoiceId             Int
  invoice               Invoice             @relation(fields: [invoiceId], references: [id])
  reason                String
  amount                Float
  refundDate            DateTime            @default(now())
  transactionId         Int?
  transaction           Transaction?        @relation(fields: [transactionId], references: [id])
  processedById         Int
  processedBy           User                @relation("ProcessedBy", fields: [processedById], references: [id])
  approvedById          Int?                // User who approved the refund
  approvedBy            User?               @relation("RefundApprovedBy", fields: [approvedById], references: [id])
  status                RefundStatus        @default(PENDING)
  notes                 String?
  refundMethod          PaymentMethod?      // Method used for refund
  refundReference       String?             @unique // External refund reference
  auditLogs             AuditLog[]          @relation("RefundAuditLogs")
  notifications         BillingNotification[] @relation("RefundNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model PaymentPlan {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  invoiceId             Int
  invoice               Invoice             @relation("InvoicePaymentPlans", fields: [invoiceId], references: [id])
  totalAmount           Float
  installmentAmount     Float
  numberOfInstallments  Int
  startDate             DateTime
  endDate               DateTime?
  status                String              @default("ACTIVE") // ACTIVE, COMPLETED, DEFAULTED
  createdById           Int?                // User who created payment plan
  createdBy             User?               @relation(fields: [createdById], references: [id])
  approvedById          Int?                // User who approved payment plan
  approvedBy            User?               @relation(fields: [approvedById], references: [id])
  payments              Payment[]           @relation("PaymentPlanPayments")
  auditLogs             AuditLog[]          @relation("PaymentPlanAuditLogs")
  notifications         BillingNotification[] @relation("PaymentPlanNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Payment {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  invoiceId             Int?
  invoice               Invoice?            @relation(fields: [invoiceId], references: [id])
  paymentPlanId         Int?
  paymentPlan           PaymentPlan?        @relation("PaymentPlanPayments", fields: [paymentPlanId], references: [id])
  amount                Float
  paymentDate           DateTime            @default(now())
  paymentMethod         PaymentMethod
  transactionId         Int?
  transaction           Transaction?        @relation(fields: [transactionId], references: [id])
  referenceNumber       String?             @unique // External payment reference
  status                PaymentStatus       @default(PENDING)
  createdById           Int?                // User who recorded payment
  createdBy             User?               @relation(fields: [createdById], references: [id])
  notes                 String?
  auditLogs             AuditLog[]          @relation("PaymentAuditLogs")
  notifications         BillingNotification[] @relation("PaymentNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model InvoiceDocument {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  invoiceId             Int
  invoice               Invoice             @relation("InvoiceDocuments", fields: [invoiceId], references: [id])
  documentType          String              // e.g., "Invoice PDF", "Receipt"
  filePath              String              // Path to stored document
  uploadedById          Int?                // User who uploaded document
  uploadedBy            User?               @relation(fields: [uploadedById], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  auditLogs             AuditLog[]          @relation("InvoiceDocumentAuditLogs")
}

model BillingNotification {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  invoiceId             Int?
  invoice               Invoice?            @relation("InvoiceNotifications", fields: [invoiceId], references: [id])
  refundId              Int?
  refund                Refund?             @relation("RefundNotifications", fields: [refundId], references: [id])
  paymentId             Int?
  payment               Payment?            @relation("PaymentNotifications", fields: [paymentId], references: [id])
  paymentPlanId         Int?
  paymentPlan           PaymentPlan?        @relation("PaymentPlanNotifications", fields: [paymentPlanId], references: [id])
  notificationType      String              // e.g., "SMS", "Email", "App Push"
  status                NotificationStatus  @default(PENDING)
  sentAt                DateTime?
  recipientId           Int?                // User or patient receiving notification
  recipient             User?               @relation(fields: [recipientId], references: [id])
  message               String?             // Notification content
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}