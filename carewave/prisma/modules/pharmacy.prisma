// pharmacy.prisma
enum MedicationStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
  RECALLED
}

enum MedicationCategory {
  ANTIBIOTIC
  ANALGESIC
  ANTIHYPERTENSIVE
  ANTIDIABETIC
  NARCOTIC
  VACCINE
  OTHER
}

enum DrugInteractionSeverity {
  LOW
  MODERATE
  HIGH
  CRITICAL
}

model Pharmacy {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  patientId           Int?                  // Link to patient
  patient             Patient?              @relation(fields: [patientId], references: [id])
  appointmentId       Int?                  // Link to appointment
  appointment         Appointment?          @relation(fields: [appointmentId], references: [id])
  emergencyId         Int?                  // Link to emergency
  emergency           Emergency?            @relation(fields: [emergencyId], references: [id])
  homeCareId          Int?                  // Link to home care
  homeCare            HomeCare?             @relation(fields: [homeCareId], references: [id])
  clinicalRecordId    Int?                  // Link to clinical record
  clinicalRecord      ClinicalRecord?       @relation(fields: [clinicalRecordId], references: [id])
  invoiceId           Int?                  // Link to invoice
  invoice             Invoice?              @relation(fields: [invoiceId], references: [id])
  prescriptionId      Int?                  // Link to prescription
  prescription        Prescription?         @relation(fields: [prescriptionId], references: [id])
  departmentId        Int?                  // Link to department
  department          Department?           @relation(fields: [departmentId], references: [id])
  status              String                @default("PENDING") // e.g., PENDING, DISPENSED
  medicationDetails   String?               // JSON or text for dispensed medications
  createdById         Int?                  // User who created the record
  createdBy           User?                 @relation("PharmacyCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  // User who last updated
  updatedBy           User?                 @relation("PharmacyUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("PharmacyAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Medication {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  name                String
  genericName         String?
  category            MedicationCategory
  status              MedicationStatus      @default(ACTIVE)
  batchNumber         String
  barcode             String?               @unique
  rfid                String?               @unique
  stockQuantity       Int
  minStockThreshold   Int                   @default(10)
  maxStockThreshold   Int?
  price               Float
  costPrice           Float?
  expiryDate          DateTime
  manufactureDate     DateTime?
  supplierId          Int?
  supplier            Supplier?             @relation(fields: [supplierId], references: [id])
  formularyId         Int?
  formulary           Formulary?            @relation(fields: [formularyId], references: [id])
  narcotic            Boolean               @default(false)
  controlledSubstance Boolean               @default(false)
  storageConditions   String?
  dosageForm          String?
  strength            String?
  packSize            String?
  departmentId        Int?
  department          Department?           @relation(fields: [departmentId], references: [id])
  pharmacyId          Int?
  pharmacy            Pharmacy?             @relation(fields: [pharmacyId], references: [id])
  procurementId       Int?
  procurement         Procurement?          @relation(fields: [procurementId], references: [id])
  inventoryId         Int?
  inventory           Inventory?            @relation(fields: [inventoryId], references: [id])
  prescriptions       PrescriptionItem[]
  dispensingRecords   DispensingRecord[]
  stockAdjustments    StockAdjustment[]
  purchaseOrderItems  PurchaseOrderItem[]
  drugInteractions1   DrugInteraction[]     @relation("Medication1")
  drugInteractions2   DrugInteraction[]     @relation("Medication2")
  adverseReactions    AdverseReaction[]
  storageLocation     String?
  lotNumber           String?
  documents           String?
  createdById         Int?
  createdBy           User?                 @relation("MedicationCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?
  updatedBy           User?                 @relation("MedicationUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("MedicationAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Formulary {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  name                String
  description         String?
  status              String                @default("ACTIVE")
  medications         Medication[]
  departmentId        Int?
  department          Department?           @relation(fields: [departmentId], references: [id])
  restrictions        String?
  version             String?
  effectiveDate       DateTime              @default(now())
  expiryDate          DateTime?
  createdById         Int?
  createdBy           User?                 @relation("FormularyCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?
  updatedBy           User?                 @relation("FormularyUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("FormularyAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model DrugInteraction {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  medicationId1       Int
  medication1         Medication            @relation("Medication1", fields: [medicationId1], references: [id])
  medicationId2       Int
  medication2         Medication            @relation("Medication2", fields: [medicationId2], references: [id])
  interaction         String
  severity            DrugInteractionSeverity
  recommendation      String?
  createdById         Int?
  createdBy           User?                 @relation("InteractionCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?
  updatedBy           User?                 @relation("InteractionUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("DrugInteractionAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model AdverseReaction {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  medicationId        Int
  medication          Medication            @relation(fields: [medicationId], references: [id])
  patientId           Int?
  patient             Patient?              @relation(fields: [patientId], references: [id])
  reaction            String
  severity            String
  reportedDate        DateTime              @default(now())
  medicalRecordId     Int?
  medicalRecord       MedicalRecord?        @relation(fields: [medicalRecordId], references: [id])
  clinicalRecordId    Int?
  clinicalRecord      ClinicalRecord?       @relation(fields: [clinicalRecordId], references: [id])
  notes               String?
  createdById         Int?
  createdBy           User?                 @relation("AdverseReactionCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?
  updatedBy           User?                 @relation("AdverseReactionUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("AdverseReactionAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}