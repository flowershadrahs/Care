enum EmergencyStatus {
  PENDING
  ACTIVE
  STABILIZED
  TRANSFERRED
  DISCHARGED
  CANCELLED
}



model Emergency {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  patientId             Int
  patient               Patient             @relation("PatientEmergencies", fields: [patientId], references: [id])
  doctorId              Int?                @unique
  doctor                Doctor?             @relation("DoctorEmergencies", fields: [doctorId], references: [id])
  admissionId           Int?                @unique
  admission             Admission?          @relation("EmergencyAdmissions", fields: [admissionId], references: [id])
  departmentId          Int?
  department            Department?         @relation("DepartmentEmergencies", fields: [departmentId], references: [id])
  clinicalSettingId     Int?                @unique
  clinicalSetting       ClinicalSetting?    @relation("EmergencyClinicalSettings", fields: [clinicalSettingId], references: [id])
  triagePriority        TriagePriority
  triageNotes           String?
  triageDate            DateTime?
  status                EmergencyStatus     @default(PENDING)
  incidentDate          DateTime            @default(now())
  presentingComplaints  String?
  initialAssessment     String?
  treatmentProvided     String?
  laboratoryId          Int?                @unique
  laboratory            Laboratory?         @relation("EmergencyLaboratory", fields: [laboratoryId], references: [id])
  radiologyId           Int?                @unique
  radiology             Radiology?          @relation("EmergencyRadiology", fields: [radiologyId], references: [id])
  pharmacyId            Int?                @unique
  pharmacy              Pharmacy?           @relation("EmergencyPharmacy", fields: [pharmacyId], references: [id])
  operationTheatreId    Int?                @unique
  operationTheatre      OperationTheatre?   @relation("EmergencyOperationTheatre", fields: [operationTheatreId], references: [id])
  billingId             Int?                @unique
  billing               Billing?            @relation("EmergencyBilling", fields: [billingId], references: [id])
  claimId               Int?                @unique
  claim                 Claim?              @relation("EmergencyClaims", fields: [claimId], references: [id])
  wardId                Int?                @unique
  ward                  Ward?               @relation("EmergencyWard", fields: [wardId], references: [id])
  bedId                 Int?                @unique
  bed                   Bed?                @relation("EmergencyBed", fields: [bedId], references: [id])
  transferReason        String?
  transferDate          DateTime?
  dischargeDate         DateTime?
  dischargeNotes        String?
  createdById           Int?                @unique
  createdBy             User?               @relation("EmergencyCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                @unique
  updatedBy             User?               @relation("EmergencyUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("EmergencyAuditLogs")
  emergencyDocuments    EmergencyDocument[] @relation("EmergencyDocuments")
  emergencyNotifications EmergencyNotification[] @relation("EmergencyNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model EmergencyDocument {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  emergencyId           Int
  emergency             Emergency           @relation("EmergencyDocuments", fields: [emergencyId], references: [id])
  documentType          String
  filePath              String
  description           String?
  uploadedById          Int?                @unique
  uploadedBy            User?               @relation("EmergencyDocumentUploadedBy", fields: [uploadedById], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  auditLogs             AuditLog[]          @relation("EmergencyDocumentAuditLogs")
}

model EmergencyNotification {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  emergencyId           Int
  emergency             Emergency           @relation("EmergencyNotifications", fields: [emergencyId], references: [id])
  notificationType      String
  status                NotificationStatus  @default(PENDING)
  sentAt                DateTime?
  recipientId           Int?                @unique
  recipient             User?               @relation("EmergencyNotificationRecipient", fields: [recipientId], references: [id])
  message               String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}