enum QueueStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
  SKIPPED
  CANCELLED
}

enum QueuePriority {
  EMERGENCY
  URGENT
  NON_URGENT
}

enum QueueConfigStatus {
  ACTIVE
  INACTIVE
}

model Queue {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  queueNumber         Int
  status              QueueStatus           @default(WAITING)
  priority            QueuePriority?
  patientId           Int?                  @unique
  patient             Patient?              @relation("PatientQueue")
  appointmentId       Int?                  @unique
  appointment         Appointment?          @relation("AppointmentQueue")
  admissionId         Int?                  @unique
  admission           Admission?            @relation("AdmissionQueue")
  departmentId        Int?
  department          Department?           @relation("DepartmentQueues", fields: [departmentId], references: [id])
  doctorId            Int?
  doctor              Doctor?               @relation("QueueDoctor", fields: [doctorId], references: [id])
  clinicalSettingId   Int?                  @unique
  clinicalSetting     ClinicalSetting?      @relation("QueueClinicalSettings")
  wardId              Int?
  ward                Ward?                 @relation("WardQueue", fields: [wardId], references: [id])
  serviceType         String?
  estimatedWaitTime   Int?
  calledAt            DateTime?
  completedAt         DateTime?
  notes               String?
  createdById         Int?                  @unique
  createdBy           User?                 @relation("QueueCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  @unique
  updatedBy           User?                 @relation("QueueUpdatedBy", fields: [updatedById], references: [id])
  queueLogs           QueueLog[]            @relation("QueueLogs")
  notifications       QueueNotification[]   @relation("QueueNotifications")
  auditLogs           AuditLog[]            @relation("QueueAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  dashboardWidgets    DashboardWidget[]     @relation("DashboardWidgetQueue")
}

model QueueLog {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  queueId             Int
  queue               Queue                 @relation("QueueLogs", fields: [queueId], references: [id])
  action              String
  actionById          Int?                  @unique
  actionBy            User?                 @relation("QueueLogActionBy", fields: [actionById], references: [id])
  actionDate          DateTime              @default(now())
  notes               String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model QueueNotification {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  queueId             Int
  queue               Queue                 @relation("QueueNotifications", fields: [queueId], references: [id])
  notificationType    String
  status              NotificationStatus    @default(PENDING)
  sentAt              DateTime?
  recipientId         Int?                  @unique
  recipient           User?                 @relation("QueueNotificationRecipient", fields: [recipientId], references: [id])
  message             String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model QueueConfiguration {
  id                  Int                   @id @default(autoincrement())
  uuid                String                @unique @default(uuid())
  departmentId        Int?
  department          Department?           @relation("DepartmentQueueConfigurations", fields: [departmentId], references: [id])
  clinicalSettingId   Int?                  @unique
  clinicalSetting     ClinicalSetting?      @relation("QueueConfigClinicalSettings", fields: [clinicalSettingId], references: [id])
  name                String
  description         String?
  maxQueueSize        Int?
  priorityRules       String?
  autoAssignDoctor    Boolean               @default(false)
  notificationSettings String?
  operatingHours      String?
  status              QueueConfigStatus     @default(ACTIVE)
  createdById         Int?                  @unique
  createdBy           User?                 @relation("QueueConfigCreatedBy", fields: [createdById], references: [id])
  updatedById         Int?                  @unique
  updatedBy           User?                 @relation("QueueConfigUpdatedBy", fields: [updatedById], references: [id])
  auditLogs           AuditLog[]            @relation("QueueConfigAuditLogs")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}