enum LabTestStatus {
  ORDERED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

enum LabTestType {
  BLOOD
  URINE
  MICROBIOLOGY
  PATHOLOGY
  BIOCHEMISTRY
  IMMUNOLOGY
  OTHER
}



model Laboratory {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  testCode              String              @unique // e.g., "LAB-001"
  patientId             Int
  patient               Patient             @relation(fields: [patientId], references: [id])
  doctorId              Int?                // Link to ordering doctor
  doctor                Doctor?             @relation("LaboratoryOrders", fields: [doctorId], references: [id])
  appointmentId         Int?                // Link to appointment
  appointment           Appointment?        @relation(fields: [appointmentId], references: [id])
  admissionId           Int?                // Link to admission
  admission             Admission?          @relation(fields: [admissionId], references: [id])
  clinicalRecordId      Int?                // Link to clinical record
  clinicalRecord        ClinicalRecord?     @relation(fields: [clinicalRecordId], references: [id])
  departmentId          Int?                // Link to department
  department            Department?         @relation(fields: [departmentId], references: [id])
  clinicalSettingId     Int?                // Link to clinical setting
  clinicalSetting       ClinicalSetting?    @relation(fields: [clinicalSettingId], references: [id])
  testType              LabTestType         // Type of lab test
  status                LabTestStatus       @default(ORDERED)
  testName              String              // Name of the test (e.g., "Complete Blood Count")
  description           String?             // Detailed description of test
  orderDate             DateTime            @default(now()) // Date test was ordered
  sampleCollectionDate  DateTime?           // Date sample was collected
  resultDate            DateTime?           // Date results were available
  results               String?             // JSON or text for test results
  normalRange           String?             // JSON or text for reference range (e.g., {"hb": "12-16 g/dL"})
  billingId             Int?                // Link to billing for lab test
  billing               Billing?            @relation(fields: [billingId], references: [id])
  claimId               Int?                // Link to insurance claim
  claim                 Claim?              @relation(fields: [claimId], references: [id])
  sampleId              String?             // Unique sample identifier (e.g., barcode)
  performedById         Int?                // User or technician who performed the test
  performedBy           User?               @relation("PerformedBy", fields: [performedById], references: [id])
  reviewedById          Int?                // User who reviewed the results
  reviewedBy            User?               @relation("ReviewedBy", fields: [reviewedById], references: [id])
  notes                 String?             // Additional notes for the test
  createdById           Int?                // User who created the lab record
  createdBy             User?               @relation("LaboratoryCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation("LaboratoryUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("LaboratoryAuditLogs")
  labDocuments          LabDocument[]       @relation("LaboratoryDocuments")
  labNotifications      LabNotification[]   @relation("LaboratoryNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model LabDocument {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  laboratoryId          Int
  laboratory            Laboratory          @relation("LaboratoryDocuments", fields: [laboratoryId], references: [id])
  documentType          String              // e.g., "Lab Report", "Sample Image"
  filePath              String              // Path to stored document
  description           String?             // Description of document
  uploadedById          Int?                // User who uploaded document
  uploadedBy            User?               @relation(fields: [uploadedById], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  auditLogs             AuditLog[]          @relation("LabDocumentAuditLogs")
}

model LabNotification {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  laboratoryId          Int
  laboratory            Laboratory          @relation("LaboratoryNotifications", fields: [laboratoryId], references: [id])
  notificationType      String              // e.g., "SMS", "Email", "App Push"
  status                NotificationStatus  @default(PENDING)
  sentAt                DateTime?
  recipientId           Int?                // User or patient receiving notification
  recipient             User?               @relation(fields: [recipientId], references: [id])
  message               String?             // Notification content
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}