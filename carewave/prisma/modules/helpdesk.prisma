enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  ESCALATED
  ON_HOLD
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TicketCategory {
  TECHNICAL
  CLINICAL
  ADMINISTRATIVE
  BILLING
  FACILITY
  OTHER
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  READ
}

model Helpdesk {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  ticketNumber          String              @unique // e.g., "HD-2025-001"
  title                 String              // Brief summary of issue
  description           String              // Detailed description of issue
  category              TicketCategory      // Type of issue
  priority              TicketPriority      @default(MEDIUM)
  status                TicketStatus        @default(OPEN)
  reportedById          Int?                // User who reported the issue
  reportedBy            User?               @relation("ReportedBy", fields: [reportedById], references: [id])
  assignedToId          Int?                // User assigned to resolve the issue
  assignedTo            User?               @relation("AssignedTo", fields: [assignedToId], references: [id])
  doctorId              Int?                // Link to doctor if related
  doctor                Doctor?             @relation("DoctorHelpdeskTickets", fields: [doctorId], references: [id])
  departmentId          Int?                // Link to department
  department            Department?         @relation(fields: [departmentId], references: [id])
  clinicalSettingId     Int?                // Link to clinical setting
  clinicalSetting       ClinicalSetting?    @relation(fields: [clinicalSettingId], references: [id])
  patientId             Int?                // Link to patient if related
  patient               Patient?            @relation(fields: [patientId], references: [id])
  admissionId           Int?                // Link to admission if related
  admission             Admission?          @relation(fields: [admissionId], references: [id])
  appointmentId         Int?                // Link to appointment if related
  appointment           Appointment?        @relation(fields: [appointmentId], references: [id])
  invoiceId             Int?                // Link to invoice if billing-related
  invoice               Invoice?            @relation(fields: [invoiceId], references: [id])
  fixedAssetId          Int?                // Link to fixed asset if related
  fixedAsset            FixedAsset?         @relation(fields: [fixedAssetId], references: [id])
  createdDate           DateTime            @default(now())
  resolvedDate          DateTime?           // Date issue was resolved
  dueDate               DateTime?           // Expected resolution date
  resolutionNotes       String?             // Notes on resolution
  escalationReason      String?             // Reason for escalation, if applicable
  createdById           Int?                // User who created the ticket
  createdBy             User?               @relation("HelpdeskCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                // User who last updated
  updatedBy             User?               @relation("HelpdeskUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("HelpdeskAuditLogs")
  ticketComments        TicketComment[]     @relation("TicketComments")
  ticketAttachments     TicketAttachment[]  @relation("TicketAttachments")
  ticketNotifications   TicketNotification[] @relation("TicketNotifications")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model TicketComment {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  helpdeskId            Int
  helpdesk              Helpdesk            @relation("TicketComments", fields: [helpdeskId], references: [id])
  comment               String              // Comment text
  createdById           Int?                // User who added the comment
  createdBy             User?               @relation(fields: [createdById], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  auditLogs             AuditLog[]          @relation("TicketCommentAuditLogs")
}

model TicketAttachment {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  helpdeskId            Int
  helpdesk              Helpdesk            @relation("TicketAttachments", fields: [helpdeskId], references: [id])
  filePath              String              // Path to stored attachment
  fileName              String              // Original file name
  fileType              String              // e.g., "PDF", "Image"
  uploadedById          Int?                // User who uploaded the attachment
  uploadedBy            User?               @relation(fields: [uploadedById], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  auditLogs             AuditLog[]          @relation("TicketAttachmentAuditLogs")
}

model TicketNotification {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  helpdeskId            Int
  helpdesk              Helpdesk            @relation("TicketNotifications", fields: [helpdeskId], references: [id])
  notificationType      String              // e.g., "SMS", "Email", "App Push"
  status                NotificationStatus  @default(PENDING)
  sentAt                DateTime?
  recipientId           Int?                // User receiving notification
  recipient             User?               @relation(fields: [recipientId], references: [id])
  message               String?             // Notification content
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}