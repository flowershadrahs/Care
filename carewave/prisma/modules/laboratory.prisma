enum LabTestStatus {
  ORDERED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

enum LabTestType {
  BLOOD
  URINE
  MICROBIOLOGY
  PATHOLOGY
  BIOCHEMISTRY
  IMMUNOLOGY
  OTHER
}

model Laboratory {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  testCode              String              @unique
  patientId             Int
  patient               Patient             @relation("PatientLaboratoryTests", fields: [patientId], references: [id])
  doctorId              Int?
  doctor                Doctor?             @relation("LaboratoryOrders", fields: [doctorId], references: [id])
  appointmentId         Int?                @unique
  appointment           Appointment?        @relation("AppointmentLaboratory")
  admissionId           Int?
  admission             Admission?          @relation("AdmissionLaboratoryTests", fields: [admissionId], references: [id])
  clinicalRecordId      Int?                @unique
  clinicalRecord        ClinicalRecord?     @relation("ClinicalRecordLaboratory")
  departmentId          Int?
  department            Department?         @relation("DepartmentLaboratoryTests", fields: [departmentId], references: [id])
  clinicalSettingId     Int?
  clinicalSetting       ClinicalSetting?    @relation("LaboratoryClinicalSettings", fields: [clinicalSettingId], references: [id])
  testType              LabTestType
  status                LabTestStatus       @default(ORDERED)
  testName              String
  description           String?
  orderDate             DateTime            @default(now())
  sampleCollectionDate  DateTime?
  resultDate            DateTime?
  results               String?
  normalRange           String?
  billingId             Int?
  billing               Billing?            @relation("LaboratoryBilling", fields: [billingId], references: [id])
  claimId               Int?
  claim                 Claim?              @relation("ClaimLaboratory", fields: [claimId], references: [id])
  sampleId              String?
  performedById         Int?
  performedBy           User?               @relation("PerformedBy", fields: [performedById], references: [id])
  reviewedById          Int?
  reviewedBy            User?               @relation("ReviewedBy", fields: [reviewedById], references: [id])
  notes                 String?
  createdById           Int?                @unique
  createdBy             User?               @relation("LaboratoryCreatedBy", fields: [createdById], references: [id])
  updatedById           Int?                @unique
  updatedBy             User?               @relation("LaboratoryUpdatedBy", fields: [updatedById], references: [id])
  auditLogs             AuditLog[]          @relation("LaboratoryAuditLogs")
  labDocuments          LabDocument[]       @relation("LaboratoryDocuments")
  labNotifications      LabNotification[]   @relation("LaboratoryNotifications")
  dashboardWidget       DashboardWidget?    @relation("DashboardWidgetLaboratory")
  homeCares             HomeCare[]          @relation("HomeCareLaboratory")
  nhifClaims            NhifClaim[]         @relation("NhifClaimLaboratory")
  emergency             Emergency?          @relation("EmergencyLaboratory")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model LabDocument {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  laboratoryId          Int
  laboratory            Laboratory          @relation("LaboratoryDocuments", fields: [laboratoryId], references: [id])
  documentType          String
  filePath              String
  description           String?
  uploadedById          Int?                @unique
  uploadedBy            User?               @relation("LabDocumentUploadedBy", fields: [uploadedById], references: [id])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  auditLogs             AuditLog[]          @relation("LabDocumentAuditLogs")
}

model LabNotification {
  id                    Int                 @id @default(autoincrement())
  uuid                  String              @unique @default(uuid())
  laboratoryId          Int
  laboratory            Laboratory          @relation("LaboratoryNotifications", fields: [laboratoryId], references: [id])
  notificationType      String
  status                NotificationStatus  @default(PENDING)
  sentAt                DateTime?
  recipientId           Int?                @unique
  recipient             User?               @relation("LabNotificationRecipient", fields: [recipientId], references: [id])
  message               String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}